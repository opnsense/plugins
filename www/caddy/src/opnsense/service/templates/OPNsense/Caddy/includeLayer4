{#
# This file sets up the listener_wrapper for layer 4 routing support.
# - Section: Servers Global Configuration
# Also allows for custom configurations with the import statement.
#}
{% set reverse_domains = helpers.toList('Pischem.caddy.reverseproxy.reverse') %}
{% set layer4_configs = helpers.toList('Pischem.caddy.reverseproxy.layer4') %}

{# Define a macro for the proxy setup #}
{% macro setup_proxy(layer4) %}
    proxy {% for domain in layer4.ToDomain.split(',') %}
        {% set is_ipv6 = (':' in domain and domain.count(':') >= 2) %}
        {{ is_ipv6 and '[' or '' }}{{ domain }}{{ is_ipv6 and ']' or '' }}:{{ layer4.ToPort }}{% if not loop.last %} {% endif %}
    {% endfor %} {
    {% if layer4.PassiveHealthFailDuration %}
        fail_duration {{ layer4.PassiveHealthFailDuration }}s
    {% endif %}
    }
{% endmacro %}

{# Set up Layer4 App #}
layer4 {
    import /usr/local/etc/caddy/caddy.d/*.layer4
    {# Loop through each domain #}
    {% for reverse in reverse_domains %}
        {% if reverse.enabled == "1" %}
            {# Check for Layer 4 configurations related to the current domain #}
            {% for layer4 in layer4_configs %}
                {% if layer4.enabled == "1" and layer4.reverse == reverse['@uuid'] %}
                    {# Check for TLS Matchers #}
                    {% if 'tls' in layer4.Matchers %}
                        @{{ reverse['@uuid'] }}-tls tls sni {{ reverse.FromDomain }}
                        route @{{ reverse['@uuid'] }}-tls {
                            {{ setup_proxy(layer4) }}
                        }
                    {% endif %}
                {% endif %}
            {% endfor %}
        {% endif %}
    {% endfor %}
    {# Empty Route that catches all other traffic #}
    route
}
{# Route all other traffic to HTTP App #}
tls
