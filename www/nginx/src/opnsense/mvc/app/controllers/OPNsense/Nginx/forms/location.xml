<form>
  <field>
    <id>location.description</id>
    <label>Description</label>
    <type>text</type>
  </field>
  <field>
    <id>location.urlpattern</id>
    <label>URL Pattern</label>
    <type>text</type>
    <help>The URL pattern to match.</help>
  </field>
  <field>
    <id>location.matchtype</id>
    <label>Match Type</label>
    <type>dropdown</type>
    <help>Choose how to match on "URL Pattern".</help>
  </field>
  <field>
    <id>location.rewrites</id>
    <label>URL Rewriting</label>
    <type>select_multiple</type>
    <style>selectpicker</style>
    <help>Choose URL rewriting rules.</help>
  </field>
  <field>
    <id>location.enable_secrules</id>
    <label>Enable Security Rules</label>
    <type>checkbox</type>
    <help>Enable WAF</help>
  </field>
  <field>
    <id>location.enable_learning_mode</id>
    <label>Learning Mode</label>
    <type>checkbox</type>
    <help>Enable learning mode means nothing is blocked but logged.</help>
  </field>
  <field>
    <id>location.xss_block_score</id>
    <label>Block XSS Score</label>
    <type>text</type>
    <help>Block XSS with a score above the specified value using generic detection.</help>
  </field>
  <field>
    <id>location.sqli_block_score</id>
    <label>Block SQL Injection Score</label>
    <type>text</type>
    <help>Block SQL injection with a score above the specified value using generic detection.</help>
  </field>
  <field>
    <id>location.custom_policy</id>
    <label>Custom Security Policy</label>
    <type>select_multiple</type>
    <style>selectpicker</style>
    <help>Select custom security policies.</help>
  </field>
  <field>
    <id>location.upstream</id>
    <label>Upstream Servers</label>
    <type>dropdown</type>
    <style>selectpicker</style>
    <help>Select an upstream to proxy to or connect via FastCGI if chosen.</help>
  </field>
  <field>
    <id>location.path_prefix</id>
    <label>Path Prefix</label>
    <type>text</type>
    <help>Define an optional path prefix for this location. It will be prepended to the path so http://www.example.com/index.php will be sent to http://www.example.com/app/index.php on your upstream if you choose "/app" as path prefix.</help>
  </field>
  <field>
    <id>location.cache_path</id>
    <label>Cache: Directory</label>
    <type>dropdown</type>
    <help>Choose a cache directory if you want to cache responses.</help>
  </field>
  <field>
    <id>location.cache_use_stale</id>
    <label>Cache: Use Stale</label>
    <type>select_multiple</type>
    <style>selectpicker</style>
    <advanced>true</advanced>
    <help>If you enable this option, a stale response will be sent when in cases the original server is unable to (for example if it is down).</help>
  </field>
  <field>
    <id>location.cache_min_uses</id>
    <label>Cache: Minimum Uses</label>
    <type>text</type>
    <advanced>true</advanced>
    <help>Enter how often the resource must be hit before adding it to the cache.</help>
  </field>
  <field>
    <id>location.cache_background_update</id>
    <label>Cache: Background Update</label>
    <type>checkbox</type>
    <advanced>true</advanced>
    <help>Return a stale response to the client and update the cache.</help>
  </field>
  <field>
    <id>location.cache_lock</id>
    <label>Cache: Lock Backend on Update</label>
    <type>checkbox</type>
    <advanced>true</advanced>
    <help>Only allow a single request to call the backend on the same URL at a single time.</help>
  </field>
  <field>
    <id>location.cache_revalidate</id>
    <label>Cache: Revalidate</label>
    <type>checkbox</type>
    <advanced>true</advanced>
    <help>Only request a new version, if the content has changed since the last cache update.</help>
  </field>
  <field>
    <id>location.cache_methods</id>
    <label>Cache: HTTP Verbs</label>
    <type>select_multiple</type>
    <style>selectpicker</style>
    <advanced>true</advanced>
    <help>Select the HTTP verbs to cache. GET and HEAD will be always cached.</help>
  </field>
  <field>
    <id>location.limit_request_connections</id>
    <label>Limit Requests</label>
    <type>select_multiple</type>
    <style>selectpicker</style>
    <advanced>true</advanced>
    <help>If you choose multiple limits, the strictest will be used.</help>
  </field>
  <field>
    <id>location.root</id>
    <label>File System Root</label>
    <type>text</type>
    <help>Enter the file system root from which the files are served.</help>
  </field>
  <field>
    <id>location.max_body_size</id>
    <label>Maximum Body Size</label>
    <type>text</type>
    <advanced>true</advanced>
    <help>If the request is larger, it will be rejectet with error 413 (Request Entity Too Large). For example, you can enter 200m.</help>
  </field>
  <field>
    <id>location.body_buffer_size</id>
    <label>Body Buffer Size</label>
    <type>text</type>
    <advanced>true</advanced>
    <help>If the request exceeds this size, it will be written to disk. Enter a number and a unit like 1m.</help>
  </field>
  <field>
    <id>location.index</id>
    <label>Index File</label>
    <type>select_multiple</type>
    <allownew>true</allownew>
    <style>tokenize</style>
    <help>Enter a list of file extensions, which are served instead of a directory. It is common to use index.html or index.php here.</help>
  </field>
  <field>
    <id>location.autoindex</id>
    <label>Automatic Index</label>
    <type>checkbox</type>
    <help>Check this to serve a file list when a directory is requested. This is useful for serving multiple files with someone without a web application. It is recommended to use this option only with authentication.</help>
  </field>
  <field>
    <id>location.authbasic</id>
    <label>Basic Authentication</label>
    <type>text</type>
    <help>Enter the realm for this directory and enable authentication.</help>
  </field>
  <field>
    <id>location.authbasicuserfile</id>
    <label>Basic Credentials List</label>
    <type>dropdown</type>
    <help>Select a credential list to use.</help>
  </field>
  <field>
    <id>location.advanced_acl</id>
    <label>Enable Advanced ACLs</label>
    <type>checkbox</type>
    <help>Send an authentication request to the OPNsense backend for advanced access control.</help>
  </field>
  <field>
    <id>location.ip_acl</id>
    <label>IP ACL</label>
    <type>dropdown</type>
    <style>selectpicker</style>
    <help>If you select an IP ACL, the client can only access this service if it fulfills this requirement.</help>
  </field>
  <field>
    <id>location.satisfy</id>
    <label>Satisfy</label>
    <type>dropdown</type>
    <style>selectpicker</style>
    <advanced>true</advanced>
    <help>All: All access restrictions must be fulfilled; Any: Any of the access restrictions must be fulfilled.</help>
  </field>
  <field>
    <id>location.force_https</id>
    <label>Force HTTPS</label>
    <type>checkbox</type>
    <help>Force encrypted connections.</help>
  </field>
  <field>
    <id>location.http2_push_preload</id>
    <label>Enable HTTP/2 Preloading</label>
    <type>checkbox</type>
    <help>If you check this box, you can use the link header to send resources to the client before they are requested. You can boost your performance with this setting. This requires that your application sets the "Link" header correctly.</help>
  </field>
  <field>
    <id>location.php_enable</id>
    <label>Pass Request To Local PHP Interpreter / Threat Upstream As FastCGI</label>
    <type>checkbox</type>
    <help>Only use this setting if you know what you are doing. If not, expect your machine to get compromised. Use this setting when you want to run a local PHP application or call an external upstream, if selected, via FastCGI. Example upstreams are PHP-FPM or Rails via FastCGI API.</help>
  </field>
  <field>
    <id>location.php_override_scriptname</id>
    <label>(PHP) Router Script</label>
    <type>text</type>
    <help>If you set this setting, all requests are sent to this script instead of the request path (URL). Not using this setting on a remote instance can be dangerous.</help>
  </field>
  <field>
    <id>location.honeypot</id>
    <label>Honeypot</label>
    <type>checkbox</type>
    <advanced>true</advanced>
    <help>If you enable the honeypot, all requests to this location will go to a special temporary log which will be used to block the IP. This is dangerous because you may accidentally block legitimate users or search engines. The result is available as a special alias in the firewall section. For example you can trigger on locations of Wordpress for phpMyAdmin if you are not using it.</help>
  </field>
  <field>
    <type>header</type>
    <label>Advanced Proxy Options</label>
    <advanced>true</advanced>
  </field>
  <field>
    <id>location.websocket</id>
    <label>WebSocket Support</label>
    <type>checkbox</type>
    <advanced>true</advanced>
    <help>If you enable the WebSocket Support option, nginx will pass the upgrade header to the backed server.</help>
  </field>
  <field>
    <id>location.proxy_buffering</id>
    <label>Response Buffering</label>
    <type>checkbox</type>
    <advanced>true</advanced>
    <help>If you enable the Response Buffering option, nginx will buffer response from the backed server.</help>
  </field>
  <field>
    <id>location.proxy_request_buffering</id>
    <label>Request Buffering</label>
    <type>checkbox</type>
    <advanced>true</advanced>
    <help>If you enable the WebSocket option, nginx will pass the upgrade header to the backed server.</help>
  </field>
  <field>
    <id>location.proxy_ignore_client_abort</id>
    <label>Ignore Client Abort</label>
    <type>checkbox</type>
    <advanced>true</advanced>
    <help>If you enable this option, nginx will not terminate the connection to the backend server if the client connection is terminated.</help>
  </field>
</form>
