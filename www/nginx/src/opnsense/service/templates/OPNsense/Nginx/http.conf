include       mime.types;

{%   include "OPNsense/Nginx/ruleset.conf" ignore missing with context %}


log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';
log_format  handshake   '"$http_user_agent" "$ssl_ciphers" "$ssl_curves"';
log_format  anonymized  ':: - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

#tcp_nopush     on;
# https intercept detection
js_include /usr/local/opnsense/scripts/nginx/ngx_functions.js;
js_set $tls_intercepted check_intercept;

# 200M should be big enough for file servers etc.
client_max_body_size 200M;
brotli_static on;
brotli on;
gzip_static on;
gzip on;
server_tokens off;
sendfile {% if OPNsense.Nginx.http.sendfile is defined and OPNsense.Nginx.http.sendfile == '1' %}On{% else %}Off{% endif %};
{% if OPNsense.Nginx.http.default_type is defined and OPNsense.Nginx.http.default_type != '' %}
default_type {{ OPNsense.Nginx.http.default_type }};
{% else %}
default_type  application/octet-stream;
{% endif %}
{% if OPNsense.Nginx.http.keepalive_timeout is defined and OPNsense.Nginx.http.keepalive_timeout != '' %}
keepalive_timeout {{ OPNsense.Nginx.http.keepalive_timeout }};
{% endif %}

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

# TODO add when core is ready for allowing nginx to serve the web interface
# include nginx_web.conf;


{% for zone in helpers.toList('OPNsense.Nginx.limit_zone') %}
limit_req_zone ${{ zone.key }} zone={{ zone['@uuid'].replace('-', '') }}:{{ zone.size }}m rate={{ zone.rate }}{{ zone.rate_unit }};
{% endfor %}

{% for cache_path in helpers.toList('OPNsense.Nginx.cache_path') %}
proxy_cache_path {{ cache_path.path }} levels=1:2 keys_zone={{ cache_path['@uuid'].replace('-', '') }}:{{ cache_path.size
}}m{% if cache_path.max_size is defined and cache_path.max_size != ''
    %} max_size={{ cache_path.max_size }}g{% endif%}{% if cache_path.inactive is defined and cache_path.inactive != ''
%} inactive={{ cache_path.inactive }}m{% endif%} use_temp_path={%
if cache_path.use_temp_path is defined and cache_path.use_temp_path == '1'
%}on{% else %}off{%endif%};
{% endfor %}

{% include "OPNsense/Nginx/upstream.conf" ignore missing with context %}

{%   set listen_list = [] %}
{% for server in helpers.toList('OPNsense.Nginx.http_server') %}
{%   set single_servername = server.servername.split(",")[0] %}
server {
{% set our_headers = [] %}
{% do our_headers.append('X-Powered-By') %}
{%   if server.listen_http_port is defined %}
    listen  {{ server.listen_http_port }}{% if server.proxy_protocol is defined and server.proxy_protocol == '1' %} proxy_protocol{% endif %};
    listen  [::]:{{ server.listen_http_port }}{% if server.proxy_protocol is defined and server.proxy_protocol == '1' %} proxy_protocol{% endif %};
{% do listen_list.append(server.listen_http_port) %}
{%   endif %}
{%   if server.listen_https_port is defined and server.certificate is defined %}
    listen  {{ server.listen_https_port }} http2 ssl;
    listen  [::]:{{ server.listen_https_port }} http2 ssl;
{% do listen_list.append(server.listen_https_port) %}
{%     if server.ca is defined %}
    ssl_client_certificate /usr/local/etc/nginx/key/{{ single_servername }}_ca.pem;
    ssl_verify_client {{ server.verify_client }};
{%     endif %}
    ssl_certificate_key /usr/local/etc/nginx/key/{{ single_servername }}.key;
    ssl_certificate /usr/local/etc/nginx/key/{{ single_servername }}.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_dhparam /usr/local/etc/dh-parameters.4096;
    ssl_ciphers 'ECDHE-ECDSA-CAMELLIA256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CAMELLIA256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-CAMELLIA128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-CAMELLIA128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-CAMELLIA256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-CAMELLIA256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-CAMELLIA128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_prefer_server_ciphers on;
    add_header Strict-Transport-Security max-age=15768000;
{%     do our_headers.append('Strict-Transport-Security') %}
    sendfile {% if server.sendfile is defined and server.sendfile == '1' %}On{% else %}Off{% endif %};
{%   endif %}
    server_name  {{ server.servername.replace(',', ' ') }};
{% if server.real_ip_source is defined and server.real_ip_source != '' %}
    real_ip_header {{ server.real_ip_source }};
{%   if server.trusted_proxies is defined and server.trusted_proxies != '' %}
{%     for trusted_proxy in server.trusted_proxies.split(',') %}
    set_real_ip_from {{ trusted_proxy }};
{%     endfor %}
{%   endif %}
{% endif %}
{% if server.charset is defined %}
    charset {{ server.charset }};
{% endif %}
    access_log  /var/log/nginx/{{ server.servername }}.access.log {{ server.access_log_format }};
    access_log  /var/log/nginx/tls_handshake.log handshake;
    error_log  /var/log/nginx/{{ server.servername }}.error.log;
{% if server.root is defined and server.root != '' %}
    root "{{server.root}}";
{% endif %}
{% if server.max_body_size is defined %}
    client_max_body_size {{ server.max_body_size }};
{% endif %}
{% if server.body_buffer_size is defined %}
    client_body_buffer_size {{ server.body_buffer_size }};
{% endif %}
{% if server.satisfy is defined %}
    satisfy {{ server.satisfy }};
{% endif %}
    #include tls.conf;
    error_page 404 /opnsense_error_404.html;
    error_page 500 501 502 503 504 /opnsense_server_error.html;
{% if server.security_header is defined and server.security_header != '' %}
{% set security_rule = helpers.getUUID(server.security_header) %}
{%   if security_rule is defined %}
{%     include "OPNsense/Nginx/security_rule.conf" ignore missing with context %}
{%   endif %}
{% endif %}
{% if server.limit_request_connections is defined %}
{%   set limit_request = server.limit_request_connections %}
{%   include "OPNsense/Nginx/httprequestlimit.conf" ignore missing with context %}
{% endif %}
    # location to ban the host permanently
    set $naxsi_extensive_log {% if server.naxsi_extensive_log is defined and server.naxsi_extensive_log == '1' %}1{% else %}0{% endif %};
    location @permanentban {
        access_log /var/log/nginx/permanentban.access.log main;
        internal;
        add_header Content-Type text/plain;
        add_header Charset utf-8;
        return 403 "You got banned permanently from this server.";
    }
    error_page 418 = @permanentban;
    location = /opnsense_server_error.html {
        internal;
        root /usr/local/etc/nginx/views;
    }
    location = /opnsense_error_404.html {
        internal;
        root /usr/local/etc/nginx/views;
    }
    location = /waf_denied.html {
        root /usr/local/etc/nginx/views;
        access_log /var/log/nginx/waf_denied.access.log main;
    }
{% if server.enable_acme_support is defined and server.enable_acme_support == '1' %}
    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        root /var/etc/acme-client/challenges;
    }
{% endif %}
{% if server.disable_bot_protection is not defined or server.disable_bot_protection != '1' %}
    # block based on User Agents - stuff I have found over the years in my server log
    if ($http_user_agent ~* Python-urllib|Nmap|python-requests|libwww-perl|MJ12bot|Jorgee|fasthttp|libwww|Telesphoreo|A6-Indexer|ltx71|okhttp|ZmEu|sqlmap|LMAO/2.0|ltx71|zgrab|Ronin/2.0|Hakai/2.0) {
      return 418;
    }
    {# MSIE 7 cannot be blocked - used for compatibility mode - https://blogs.msdn.microsoft.com/ieinternals/2013/09/21/internet-explorer-11s-many-user-agent-strings/ #}
    if ($http_user_agent ~ "Indy\sLibrary|Morfeus Fucking Scanner|MSIE [0-6]\.\d+")
    {
      return 418;
    }
    if ($http_user_agent ~ ^Mozilla/[\d\.]+$)
    {
      return 418;
    }
{% endif %}
{% if server.ip_acl is defined %}
{%   set ip_acl = server.ip_acl %}
{%   include "OPNsense/Nginx/ipacl.conf" %}
{% endif %}

    location = /opnsense-report-csp-violation {
      include       fastcgi_params;
      fastcgi_param QUERY_STRING $query_string;
      fastcgi_param SCRIPT_FILENAME /usr/local/opnsense/scripts/nginx/csp_report.php;
      fastcgi_param TLS-Cipher $ssl_cipher;
      fastcgi_param TLS-Protocol $ssl_protocol;
      fastcgi_param TLS-SNI-Host $ssl_server_name;
      fastcgi_param SERVER-UUID "{{ server['@uuid'] }}";
      fastcgi_intercept_errors on;
      fastcgi_pass  unix:/var/run/php-webgui.socket;
    }
    location /opnsense-auth-request {
      internal;
      fastcgi_pass  unix:/var/run/php-webgui.socket;
      fastcgi_index index.php;
      fastcgi_param TLS-Cipher $ssl_cipher;
      fastcgi_param TLS-Protocol $ssl_protocol;
      fastcgi_param TLS-SNI-Host $ssl_server_name;
      fastcgi_param Original-URI $request_uri;
      fastcgi_param Original-HOST $host;
      fastcgi_param SERVER-UUID "{{ server['@uuid'] }}";
      fastcgi_param SCRIPT_FILENAME  /usr/local/opnsense/scripts/nginx/ngx_auth.php;
{%   if server.advanced_acl_server is defined and server.advanced_acl_server != '' %}
      fastcgi_param AUTH_SERVER "{{ server.advanced_acl_server.replace("\\", "\\\\").replace("$", "\\$").replace("\"", "\\\"") }}";
{%   endif %}
      fastcgi_intercept_errors on;
      include        fastcgi_params;
    }
{%   if server.block_nonpublic_data is defined and server.block_nonpublic_data == '1' %}
    # apache htpasswd and htaccess
    location ~ /\.ht {
        return 403;
    }
    # those files may expose file system stuff
    location ~ \.DS_Store$ {
        return 403;
    }
{%   endif %}
{%   if server.https_only is defined and server.https_only == '1' %}
    if ($scheme != "https") {
        return 302 https://$host$request_uri;
    }
{%   endif %}
{% if server.rewrites is defined %}
{%   for rewrite_uuid in server.rewrites.split(',') %}
{%     set rewrite = helpers.getUUID(rewrite_uuid) %}
    rewrite {{ rewrite.source }} {{ rewrite.destination }}{% if rewrite.flag is defined%} {{ rewrite.flag }}{% endif %};
{%    endfor %}
{% endif %}

{%   if server.locations is defined %}
{%     for location_uuid in server.locations.split(',') %}
{%       set location = helpers.getUUID(location_uuid) %}
{%         if location.urlpattern is defined %}
{%       include "OPNsense/Nginx/location.conf" ignore missing with context %}
{%         endif %}
{%     endfor %}
{%   endif %}

}

{% endfor %}
