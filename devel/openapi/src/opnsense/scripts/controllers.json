{
    "OPNsense\\Mvc\\Controller": {
        "name": "OPNsense\\Mvc\\Controller",
        "namespace": "OPNsense\\Mvc",
        "parent": null,
        "methods": [],
        "model": null,
        "is_abstract": true,
        "doc": null
    },
    "OPNsense\\Base\\ControllerRoot": {
        "name": "OPNsense\\Base\\ControllerRoot",
        "namespace": "OPNsense\\Base",
        "parent": "OPNsense\\Mvc\\Controller",
        "methods": [],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Base\\ApiControllerBase": {
        "name": "OPNsense\\Base\\ApiControllerBase",
        "namespace": "OPNsense\\Base",
        "parent": "OPNsense\\Base\\ControllerRoot",
        "methods": [],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Base\\ApiMutableModelControllerBase": {
        "name": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "namespace": "OPNsense\\Base",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            }
        ],
        "model": null,
        "is_abstract": true,
        "doc": null
    },
    "OPNsense\\Auth\\Api\\GroupController": {
        "name": "OPNsense\\Auth\\Api\\GroupController",
        "namespace": "OPNsense\\Auth\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "search",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "get",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": 42
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "add",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "del",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Auth\\Group",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Auth\\Api\\PrivController": {
        "name": "OPNsense\\Auth\\Api\\PrivController",
        "namespace": "OPNsense\\Auth\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "search",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getItem",
                "method": "GET",
                "parameters": [
                    {
                        "name": "id",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "id",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Auth\\Priv",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Auth\\Api\\UserController": {
        "name": "OPNsense\\Auth\\Api\\UserController",
        "namespace": "OPNsense\\Auth\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "search",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "get",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "download",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "upload",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "newOtpSeed",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "add",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "del",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchApiKey",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delApiKey",
                "method": "POST",
                "parameters": [
                    {
                        "name": "id",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addApiKey",
                "method": "POST",
                "parameters": [
                    {
                        "name": "username",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Auth\\User",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\CaptivePortal\\Api\\AccessController": {
        "name": "OPNsense\\CaptivePortal\\Api\\AccessController",
        "namespace": "OPNsense\\CaptivePortal\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "logon",
                "method": "POST",
                "parameters": [
                    {
                        "name": "zoneid",
                        "has_default": true,
                        "default": 0
                    }
                ],
                "doc": {
                    "description": "logon client to zone, must use post type of request",
                    "params": [
                        "int|string $zoneid zone id number, provided for backwards compatibility"
                    ],
                    "throws": "\\OPNsense\\Base\\ModelException",
                    "return": "array"
                }
            },
            {
                "name": "logoff",
                "method": "GET",
                "parameters": [
                    {
                        "name": "zoneid",
                        "has_default": true,
                        "default": 0
                    }
                ],
                "doc": {
                    "description": "logoff client ",
                    "params": [
                        "int|string $zoneid zone id number, provided for backwards compatibility"
                    ],
                    "throws": "\\OPNsense\\Base\\ModelException",
                    "return": "array"
                }
            },
            {
                "name": "status",
                "method": "GET",
                "parameters": [
                    {
                        "name": "zoneid",
                        "has_default": true,
                        "default": 0
                    }
                ],
                "doc": {
                    "description": "retrieve session info ",
                    "params": [
                        "int|string $zoneid zone id number, provided for backwards compatibility"
                    ],
                    "throws": "\\OPNsense\\Base\\ModelException",
                    "return": "array"
                }
            },
            {
                "name": "api",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "RFC 8908: Captive Portal API status object  The URI for this endpoint can be provisioned to the client as defined by RFC 7710.  Request and response must set media type as \"application/captive+json\".  Response contains the following fields: - captive: boolean: client is currently in a state of captivity. - user-portal-url: string: URL to login web portal (must be HTTPS). - seconds-remaining: number: seconds until session expires,   only relevant if hardtimeout set.  Fields not implemented here but possible in the future: - venue-info-url: string: Information page (must be HTTPS) - can-extend-session: boolean: hint that client system can access   user-portal-url to extend session. - bytes-remaining: number: no. of bytes after which session expires.  Response must set Cache-Control to 'private' or 'no-store'",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\CaptivePortal\\Api\\ServiceController": {
        "name": "OPNsense\\CaptivePortal\\Api\\ServiceController",
        "namespace": "OPNsense\\CaptivePortal\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reconfigure captive portal",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getTemplate",
                "method": "GET",
                "parameters": [
                    {
                        "name": "fileid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        "null $fileid unique template id (fileid field)"
                    ],
                    "throws": "\\Exception",
                    "return": "mixed"
                }
            },
            {
                "name": "saveTemplate",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "save template, updates existing or create new.",
                    "params": [],
                    "throws": [],
                    "return": "string"
                }
            },
            {
                "name": "delTemplate",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "delete template by uuid",
                    "params": [
                        "$uuid item unique id"
                    ],
                    "throws": [],
                    "return": "array status"
                }
            },
            {
                "name": "searchTemplates",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "search captive portal zones",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\CaptivePortal\\Api\\SessionController": {
        "name": "OPNsense\\CaptivePortal\\Api\\SessionController",
        "namespace": "OPNsense\\CaptivePortal\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "list",
                "method": "GET",
                "parameters": [
                    {
                        "name": "zoneid",
                        "has_default": true,
                        "default": 0
                    }
                ],
                "doc": {
                    "description": "list client sessions",
                    "params": [
                        "int $zoneid zone number"
                    ],
                    "throws": [],
                    "return": "array|mixed"
                }
            },
            {
                "name": "search",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "search through connected clients",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "zones",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "return list of available zones",
                    "params": [],
                    "throws": [],
                    "return": "array available zones"
                }
            },
            {
                "name": "disconnect",
                "method": "POST",
                "parameters": [
                    {
                        "name": "zoneid",
                        "has_default": true,
                        "default": ""
                    }
                ],
                "doc": {
                    "description": "disconnect a client",
                    "params": [
                        "string|int $zoneid zoneid (deprecated)"
                    ],
                    "throws": [],
                    "return": "array|mixed"
                }
            },
            {
                "name": "connect",
                "method": "POST",
                "parameters": [
                    {
                        "name": "zoneid",
                        "has_default": true,
                        "default": 0
                    }
                ],
                "doc": {
                    "description": "connect a client",
                    "params": [
                        "string|int $zoneid zoneid"
                    ],
                    "throws": [],
                    "return": "array|mixed"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\CaptivePortal\\Api\\SettingsController": {
        "name": "OPNsense\\CaptivePortal\\Api\\SettingsController",
        "namespace": "OPNsense\\CaptivePortal\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "getZone",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "retrieve zone settings or return defaults",
                    "params": [
                        "$uuid item unique id"
                    ],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "setZone",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "update zone with given properties",
                    "params": [
                        "$uuid item unique id"
                    ],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "addZone",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "add new zone and set with attributes from post",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "delZone",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "delete zone by uuid",
                    "params": [
                        "$uuid item unique id"
                    ],
                    "throws": [],
                    "return": "array status"
                }
            },
            {
                "name": "toggleZone",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "toggle zone by uuid (enable/disable)",
                    "params": [
                        "$uuid item unique id",
                        "$enabled desired state enabled(1)/disabled(1), leave empty for toggle"
                    ],
                    "throws": [],
                    "return": "array status"
                }
            },
            {
                "name": "searchZones",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "search captive portal zones",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            }
        ],
        "model": "\\OPNsense\\CaptivePortal\\CaptivePortal",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\CaptivePortal\\Api\\VoucherController": {
        "name": "OPNsense\\CaptivePortal\\Api\\VoucherController",
        "namespace": "OPNsense\\CaptivePortal\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "listProviders",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list voucher providers (authenticators of type \"voucher\")",
                    "params": [],
                    "throws": [],
                    "return": "array list of auth providers"
                }
            },
            {
                "name": "listVoucherGroups",
                "method": "GET",
                "parameters": [
                    {
                        "name": "provider",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "list voucher groups",
                    "params": [
                        "string $provider name of authentication provider"
                    ],
                    "throws": [],
                    "return": "array list of registered vouchers"
                }
            },
            {
                "name": "listVouchers",
                "method": "GET",
                "parameters": [
                    {
                        "name": "provider",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "group",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "list vouchers",
                    "params": [
                        "string $provider auth provider",
                        "string $group group name"
                    ],
                    "throws": [],
                    "return": "array vouchers within this group"
                }
            },
            {
                "name": "dropVoucherGroup",
                "method": "POST",
                "parameters": [
                    {
                        "name": "provider",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "group",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "drop a voucher group",
                    "params": [
                        "string $provider auth provider",
                        "string $group group name"
                    ],
                    "throws": [],
                    "return": "array status"
                }
            },
            {
                "name": "dropExpiredVouchers",
                "method": "POST",
                "parameters": [
                    {
                        "name": "provider",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "group",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "drop expired vouchers from group",
                    "params": [
                        "string $provider auth provider",
                        "string $group group name"
                    ],
                    "throws": [],
                    "return": "array status"
                }
            },
            {
                "name": "generateVouchers",
                "method": "POST",
                "parameters": [
                    {
                        "name": "provider",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "generate new vouchers",
                    "params": [
                        "string $provider auth provider"
                    ],
                    "throws": [],
                    "return": "array generated vouchers"
                }
            },
            {
                "name": "expireVoucher",
                "method": "POST",
                "parameters": [
                    {
                        "name": "provider",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "expire a voucher",
                    "params": [
                        "string $provider auth provider"
                    ],
                    "throws": [],
                    "return": "array status"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Core\\Api\\BackupController": {
        "name": "OPNsense\\Core\\Api\\BackupController",
        "namespace": "OPNsense\\Core\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "providers",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list available providers",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "backups",
                "method": "GET",
                "parameters": [
                    {
                        "name": "host",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "list available backups for selected host",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "diff",
                "method": "GET",
                "parameters": [
                    {
                        "name": "host",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "backup1",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "backup2",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "diff two backups for selected host",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "deleteBackup",
                "method": "GET",
                "parameters": [
                    {
                        "name": "backup",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "delete local backup",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "revertBackup",
                "method": "GET",
                "parameters": [
                    {
                        "name": "backup",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "revert to local backup from history",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "download",
                "method": "GET",
                "parameters": [
                    {
                        "name": "host",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "backup",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "download specified backup, when left empty the latest is offered",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Core\\Api\\DashboardController": {
        "name": "OPNsense\\Core\\Api\\DashboardController",
        "namespace": "OPNsense\\Core\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "getDashboard",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "saveWidgets",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "restoreDefaults",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "productInfoFeed",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "picture",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Core\\Api\\FirmwareController": {
        "name": "OPNsense\\Core\\Api\\FirmwareController",
        "namespace": "OPNsense\\Core\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "check",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Run check for updates",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "status",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "retrieve available updates",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "changelog",
                "method": "POST",
                "parameters": [
                    {
                        "name": "version",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Retrieve specific changelog in text and html format",
                    "params": [
                        "string $version changelog to retrieve"
                    ],
                    "throws": "\\Exception",
                    "return": "array corresponding changelog in both formats"
                }
            },
            {
                "name": "log",
                "method": "POST",
                "parameters": [
                    {
                        "name": "clear",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Retrieve upgrade log hidden in system",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "string with upgrade log"
                }
            },
            {
                "name": "license",
                "method": "POST",
                "parameters": [
                    {
                        "name": "package",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Retrieve specific license for package in text format",
                    "params": [
                        "string $package package to retrieve"
                    ],
                    "throws": "\\Exception",
                    "return": "array with all possible licenses"
                }
            },
            {
                "name": "reboot",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "perform reboot",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array status"
                }
            },
            {
                "name": "poweroff",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "perform poweroff",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array status"
                }
            },
            {
                "name": "update",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "perform (stable) update",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array status"
                }
            },
            {
                "name": "upgrade",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "perform (major) upgrade",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array status"
                }
            },
            {
                "name": "connection",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "run a connection check",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array status"
                }
            },
            {
                "name": "health",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "run a health check",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array status"
                }
            },
            {
                "name": "audit",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "reinstall",
                "method": "POST",
                "parameters": [
                    {
                        "name": "pkg_name",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "reinstall package",
                    "params": [
                        "string $pkg_name package name to reinstall"
                    ],
                    "throws": "\\Exception",
                    "return": "array status"
                }
            },
            {
                "name": "syncPlugins",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "install missing configured plugins",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array status"
                }
            },
            {
                "name": "resyncPlugins",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reset missing configured plugins",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array status"
                }
            },
            {
                "name": "install",
                "method": "POST",
                "parameters": [
                    {
                        "name": "pkg_name",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "install package",
                    "params": [
                        "string $pkg_name package name to install"
                    ],
                    "throws": "\\Exception",
                    "return": "array status"
                }
            },
            {
                "name": "remove",
                "method": "POST",
                "parameters": [
                    {
                        "name": "pkg_name",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "remove package",
                    "params": [
                        "string $pkg_name package name to remove"
                    ],
                    "throws": "\\Exception",
                    "return": "array status"
                }
            },
            {
                "name": "lock",
                "method": "POST",
                "parameters": [
                    {
                        "name": "pkg_name",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "lock package",
                    "params": [
                        "string $pkg_name package name to lock"
                    ],
                    "throws": "\\Exception",
                    "return": "array status"
                }
            },
            {
                "name": "unlock",
                "method": "POST",
                "parameters": [
                    {
                        "name": "pkg_name",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "unlock package",
                    "params": [
                        "string $pkg_name package name to unlock"
                    ],
                    "throws": "\\Exception",
                    "return": "array status"
                }
            },
            {
                "name": "running",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve execution status",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "upgradestatus",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve upgrade status (and log file of current process)",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "details",
                "method": "POST",
                "parameters": [
                    {
                        "name": "package",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "query package details",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array"
                }
            },
            {
                "name": "info",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list local and remote packages",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "getOptions",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list firmware mirror and flavour options",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "set firmware configuration options",
                    "params": [],
                    "throws": [],
                    "return": "array status"
                }
            }
        ],
        "model": "OPNsense\\Core\\Firmware",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Core\\Api\\HasyncController": {
        "name": "OPNsense\\Core\\Api\\HasyncController",
        "namespace": "OPNsense\\Core\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Core\\Hasync",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Core\\Api\\HasyncStatusController": {
        "name": "OPNsense\\Core\\Api\\HasyncStatusController",
        "namespace": "OPNsense\\Core\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "version",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "services",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "stop",
                "method": "POST",
                "parameters": [
                    {
                        "name": "service",
                        "has_default": true,
                        "default": null
                    },
                    {
                        "name": "service_id",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "start",
                "method": "POST",
                "parameters": [
                    {
                        "name": "service",
                        "has_default": true,
                        "default": null
                    },
                    {
                        "name": "service_id",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "restart",
                "method": "POST",
                "parameters": [
                    {
                        "name": "service",
                        "has_default": true,
                        "default": null
                    },
                    {
                        "name": "service_id",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "restartAll",
                "method": "POST",
                "parameters": [
                    {
                        "name": "service",
                        "has_default": true,
                        "default": null
                    },
                    {
                        "name": "service_id",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Core\\Api\\InitialSetupController": {
        "name": "OPNsense\\Core\\Api\\InitialSetupController",
        "namespace": "OPNsense\\Core\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "configure",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Core\\InitialSetup",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Core\\Api\\MenuController": {
        "name": "OPNsense\\Core\\Api\\MenuController",
        "namespace": "OPNsense\\Core\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "tree",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "return menu items for this user",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "search",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "search menu items",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Core\\Api\\ServiceController": {
        "name": "OPNsense\\Core\\Api\\ServiceController",
        "namespace": "OPNsense\\Core\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "search",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Search service entries",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "start",
                "method": "POST",
                "parameters": [
                    {
                        "name": "name",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "id",
                        "has_default": true,
                        "default": ""
                    }
                ],
                "doc": {
                    "description": "start a service",
                    "params": [
                        "string $name to identify the service",
                        "string $id to identify the service instance"
                    ],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "restart",
                "method": "POST",
                "parameters": [
                    {
                        "name": "name",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "id",
                        "has_default": true,
                        "default": ""
                    }
                ],
                "doc": {
                    "description": "restart a service",
                    "params": [
                        "string $name to identify the service",
                        "string $id to identify the service instance"
                    ],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "stop",
                "method": "POST",
                "parameters": [
                    {
                        "name": "name",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "id",
                        "has_default": true,
                        "default": ""
                    }
                ],
                "doc": {
                    "description": "stop a service",
                    "params": [
                        "string $name to identify the service",
                        "string $id to identify the service instance"
                    ],
                    "throws": [],
                    "return": "array"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Core\\Api\\SnapshotsController": {
        "name": "OPNsense\\Core\\Api\\SnapshotsController",
        "namespace": "OPNsense\\Core\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "isSupported",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": "boolean is this a supported feature (ZFS enabled)"
                }
            },
            {
                "name": "search",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "search snapshots",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "get",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "fetch an environment by uuid, return new when not found or $uuid equals null",
                    "params": [
                        "string $uuid"
                    ],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "create a new snapshot",
                    "params": [
                        "string $uuid uuid to save"
                    ],
                    "throws": [],
                    "return": "array status"
                }
            },
            {
                "name": "add",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "add or clone a snapshot",
                    "params": [],
                    "throws": [],
                    "return": "array status"
                }
            },
            {
                "name": "del",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "delete an environment by uuid",
                    "params": [
                        "string $uuid"
                    ],
                    "throws": "UserException when not found (or possible)",
                    "return": "array"
                }
            },
            {
                "name": "activate",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "activate a snapshot by uuid",
                    "params": [
                        "string $uuid"
                    ],
                    "throws": "UserException when not found (or possible)",
                    "return": "array"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Core\\Api\\SystemController": {
        "name": "OPNsense\\Core\\Api\\SystemController",
        "namespace": "OPNsense\\Core\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "halt",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "reboot",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "status",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "dismissStatus",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Core\\Api\\TunablesController": {
        "name": "OPNsense\\Core\\Api\\TunablesController",
        "namespace": "OPNsense\\Core\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "searchItem",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addItem",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getItem",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "reset",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Core\\Tunables",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Cron\\Api\\ServiceController": {
        "name": "OPNsense\\Cron\\Api\\ServiceController",
        "namespace": "OPNsense\\Cron\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "restart cron service",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Cron\\Api\\SettingsController": {
        "name": "OPNsense\\Cron\\Api\\SettingsController",
        "namespace": "OPNsense\\Cron\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "getJob",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "retrieve job settings or return defaults",
                    "params": [
                        "$uuid item unique id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array job contents"
                }
            },
            {
                "name": "setJob",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "update job with given properties",
                    "params": [
                        "$uuid item unique id"
                    ],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "addJob",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "add new job and set with attributes from post",
                    "params": [],
                    "throws": "\\ReflectionException",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "delJob",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "delete job by uuid ( only if origin is cron)",
                    "params": [
                        "string $uuid item unique id"
                    ],
                    "throws": "\\OPNsense\\Base\\ModelException when not bound to model",
                    "return": "array status"
                }
            },
            {
                "name": "toggleJob",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "toggle job by uuid (enable/disable)",
                    "params": [
                        "$uuid item unique id",
                        "$enabled desired state enabled(1)/disabled(1), leave empty for toggle"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array status"
                }
            },
            {
                "name": "searchJobs",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "search cron jobs",
                    "params": [],
                    "throws": "\\ReflectionException",
                    "return": "array search results"
                }
            }
        ],
        "model": "\\OPNsense\\Cron\\Cron",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\DHCPv4\\Api\\LeasesController": {
        "name": "OPNsense\\DHCPv4\\Api\\LeasesController",
        "namespace": "OPNsense\\DHCPv4\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "searchLease",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delLease",
                "method": "POST",
                "parameters": [
                    {
                        "name": "ip",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Base\\ApiMutableServiceControllerBase": {
        "name": "OPNsense\\Base\\ApiMutableServiceControllerBase",
        "namespace": "OPNsense\\Base",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "start",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "start service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array"
                }
            },
            {
                "name": "stop",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "stop service",
                    "params": [],
                    "throws": "\\Exception when configd actions fails",
                    "return": "array"
                }
            },
            {
                "name": "restart",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "restart service",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reconfigure with optional stop, generate config and start / reload",
                    "params": [],
                    "throws": "\\ReflectionException when model can't be instantiated",
                    "return": "array response message"
                }
            },
            {
                "name": "status",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve status of service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array response message"
                }
            }
        ],
        "model": null,
        "is_abstract": true,
        "doc": null
    },
    "OPNsense\\DHCPv4\\Api\\ServiceController": {
        "name": "OPNsense\\DHCPv4\\Api\\ServiceController",
        "namespace": "OPNsense\\DHCPv4\\Api",
        "parent": "OPNsense\\Base\\ApiMutableServiceControllerBase",
        "methods": [
            {
                "name": "start",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "start service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array"
                }
            },
            {
                "name": "stop",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "stop service",
                    "params": [],
                    "throws": "\\Exception when configd actions fails",
                    "return": "array"
                }
            },
            {
                "name": "restart",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "restart service",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reconfigure with optional stop, generate config and start / reload",
                    "params": [],
                    "throws": "\\ReflectionException when model can't be instantiated",
                    "return": "array response message"
                }
            },
            {
                "name": "status",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve status of service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array response message"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\DHCPv6\\Api\\LeasesController": {
        "name": "OPNsense\\DHCPv6\\Api\\LeasesController",
        "namespace": "OPNsense\\DHCPv6\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "searchLease",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchPrefix",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delLease",
                "method": "POST",
                "parameters": [
                    {
                        "name": "ip",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\DHCPv6\\Api\\ServiceController": {
        "name": "OPNsense\\DHCPv6\\Api\\ServiceController",
        "namespace": "OPNsense\\DHCPv6\\Api",
        "parent": "OPNsense\\Base\\ApiMutableServiceControllerBase",
        "methods": [
            {
                "name": "start",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "start service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array"
                }
            },
            {
                "name": "stop",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "stop service",
                    "params": [],
                    "throws": "\\Exception when configd actions fails",
                    "return": "array"
                }
            },
            {
                "name": "restart",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "restart service",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reconfigure with optional stop, generate config and start / reload",
                    "params": [],
                    "throws": "\\ReflectionException when model can't be instantiated",
                    "return": "array response message"
                }
            },
            {
                "name": "status",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve status of service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array response message"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\DHCRelay\\Api\\ServiceController": {
        "name": "OPNsense\\DHCRelay\\Api\\ServiceController",
        "namespace": "OPNsense\\DHCRelay\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "restart dhcrelay services",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\DHCRelay\\Api\\SettingsController": {
        "name": "OPNsense\\DHCRelay\\Api\\SettingsController",
        "namespace": "OPNsense\\DHCRelay\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "searchRelay",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getRelay",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addRelay",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delRelay",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setRelay",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggleRelay",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchDest",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getDest",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addDest",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delDest",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setDest",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "\\OPNsense\\DHCRelay\\DHCRelay",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Diagnostics\\Api\\ActivityController": {
        "name": "OPNsense\\Diagnostics\\Api\\ActivityController",
        "namespace": "OPNsense\\Diagnostics\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "getActivity",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve system activity (top)",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Diagnostics\\Api\\CpuUsageController": {
        "name": "OPNsense\\Diagnostics\\Api\\CpuUsageController",
        "namespace": "OPNsense\\Diagnostics\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "getCPUType",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "stream",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Diagnostics\\Api\\DnsController": {
        "name": "OPNsense\\Diagnostics\\Api\\DnsController",
        "namespace": "OPNsense\\Diagnostics\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "reverseLookup",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "perform a reverse dns lookup",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Diagnostics\\Api\\DnsDiagnosticsController": {
        "name": "OPNsense\\Diagnostics\\Api\\DnsDiagnosticsController",
        "namespace": "OPNsense\\Diagnostics\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "set",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Diagnostics\\DnsDiagnostics",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Diagnostics\\Api\\FirewallController": {
        "name": "OPNsense\\Diagnostics\\Api\\FirewallController",
        "namespace": "OPNsense\\Diagnostics\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "log",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve firewall log",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "streamLog",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "logFilters",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve firewall log filter choices",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "stats",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve firewall stats",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "queryStates",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "query pf states",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "queryPfTop",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "query pftop",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delState",
                "method": "POST",
                "parameters": [
                    {
                        "name": "stateid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "creatorid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "delete / drop a specific state by state+creator id",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "killStates",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "drop pf states by filter and/or rule id",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "listRuleIds",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "return rule'ids and descriptions from running config",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "flushStates",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "flush all pf states",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "flushSources",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "flush pf source tracking",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "pfStatistics",
                "method": "GET",
                "parameters": [
                    {
                        "name": "section",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "retrieve various pf statistics",
                    "params": [],
                    "throws": [],
                    "return": "mixed"
                }
            },
            {
                "name": "pfStates",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve pf state amount and states limit",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Diagnostics\\Api\\InterfaceController": {
        "name": "OPNsense\\Diagnostics\\Api\\InterfaceController",
        "namespace": "OPNsense\\Diagnostics\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "getInterfaceNames",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve interface name mapping",
                    "params": [],
                    "throws": [],
                    "return": "array interface mapping (raw interface to description)"
                }
            },
            {
                "name": "getArp",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve system arp table contents",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "searchArp",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "search wrapper around getArpAction",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "flushArp",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "retrieve system arp table contents",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "getNdp",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve system ndp table contents",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "searchNdp",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "search wrapper around getNdpAction",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "getRoutes",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve system routing table",
                    "params": [],
                    "throws": [],
                    "return": "mixed"
                }
            },
            {
                "name": "delRoute",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "drop route",
                    "params": [],
                    "throws": [],
                    "return": "mixed"
                }
            },
            {
                "name": "getProtocolStatistics",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve system-wide statistics for each network protocol",
                    "params": [],
                    "throws": [],
                    "return": "mixed"
                }
            },
            {
                "name": "getInterfaceStatistics",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve system-wide statistics for each network adapter",
                    "params": [],
                    "throws": [],
                    "return": "mixed"
                }
            },
            {
                "name": "getInterfaceConfig",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve status/config for each network adapter",
                    "params": [],
                    "throws": [],
                    "return": "mixed"
                }
            },
            {
                "name": "getVipStatus",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "retrieve virtual ip status (carp)",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "CarpStatus",
                "method": "POST",
                "parameters": [
                    {
                        "name": "status",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "set new carp node status (enable, disable, maintenance)",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "getPfsyncNodes",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getSocketStatistics",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve system-wide socket statistics (merge netstat with sockstat)",
                    "params": [],
                    "throws": [],
                    "return": "mixed"
                }
            },
            {
                "name": "getMemoryStatistics",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve statistics recorded by the memory management routines",
                    "params": [],
                    "throws": [],
                    "return": "mixed"
                }
            },
            {
                "name": "getBpfStatistics",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve bpf(4) peers statistics",
                    "params": [],
                    "throws": [],
                    "return": "mixed"
                }
            },
            {
                "name": "getNetisrStatistics",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve netisr(9) statistics",
                    "params": [],
                    "throws": [],
                    "return": "mixed"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Diagnostics\\Api\\LogController": {
        "name": "OPNsense\\Diagnostics\\Api\\LogController",
        "namespace": "OPNsense\\Diagnostics\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Diagnostics\\Api\\LvtemplateController": {
        "name": "OPNsense\\Diagnostics\\Api\\LvtemplateController",
        "namespace": "OPNsense\\Diagnostics\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "searchItem",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addItem",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getItem",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Diagnostics\\Lvtemplate",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Diagnostics\\Api\\NetflowController": {
        "name": "OPNsense\\Diagnostics\\Api\\NetflowController",
        "namespace": "OPNsense\\Diagnostics\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "isEnabled",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getconfig",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve Netflow settings",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "setconfig",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "update netflow configuration fields",
                    "params": [],
                    "throws": "\\OPNsense\\Base\\ValidationException",
                    "return": "array"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "configure start/stop netflow",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "status",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "request netflow status",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "cacheStats",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve netflow cache statistics",
                    "params": [],
                    "throws": [],
                    "return": "array cache statistics per netgraph node"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Diagnostics\\Api\\NetworkinsightController": {
        "name": "OPNsense\\Diagnostics\\Api\\NetworkinsightController",
        "namespace": "OPNsense\\Diagnostics\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "timeserie",
                "method": "GET",
                "parameters": [
                    {
                        "name": "provider",
                        "has_default": true,
                        "default": null
                    },
                    {
                        "name": "measure",
                        "has_default": true,
                        "default": null
                    },
                    {
                        "name": "from_date",
                        "has_default": true,
                        "default": null
                    },
                    {
                        "name": "to_date",
                        "has_default": true,
                        "default": null
                    },
                    {
                        "name": "resolution",
                        "has_default": true,
                        "default": null
                    },
                    {
                        "name": "field",
                        "has_default": true,
                        "default": null
                    },
                    {
                        "name": "emulation",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "request timeserie data to use for reporting",
                    "params": [
                        "string $provider provider class name",
                        "string $measure measure [octets, packets, octets_ps, packets_ps]",
                        "string $from_date from timestamp",
                        "string $to_date to timestamp",
                        "string $resolution resolution in seconds",
                        "string $field field name to aggregate",
                        "null $emulation"
                    ],
                    "throws": [],
                    "return": "array timeseries"
                }
            },
            {
                "name": "top",
                "method": "GET",
                "parameters": [
                    {
                        "name": "provider",
                        "has_default": true,
                        "default": null
                    },
                    {
                        "name": "from_date",
                        "has_default": true,
                        "default": null
                    },
                    {
                        "name": "to_date",
                        "has_default": true,
                        "default": null
                    },
                    {
                        "name": "field",
                        "has_default": true,
                        "default": null
                    },
                    {
                        "name": "measure",
                        "has_default": true,
                        "default": null
                    },
                    {
                        "name": "max_hits",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "request top usage data (for reporting), values can optionally be filtered using filter_field and filter_value",
                    "params": [
                        "string $provider provider class name",
                        "string $from_date from timestamp",
                        "string $to_date to timestamp",
                        "string $field field name(s) to aggregate",
                        "string $measure measure [octets, packets]",
                        "string $max_hits maximum number of results"
                    ],
                    "throws": [],
                    "return": "array timeseries"
                }
            },
            {
                "name": "getMetadata",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "get metadata from backend aggregation process",
                    "params": [],
                    "throws": [],
                    "return": "array timeseries"
                }
            },
            {
                "name": "getInterfaces",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "return interface map (device / name)",
                    "params": [],
                    "throws": [],
                    "return": "array interfaces"
                }
            },
            {
                "name": "getProtocols",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "return known protocols",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getServices",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "return known services",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "export",
                "method": "GET",
                "parameters": [
                    {
                        "name": "provider",
                        "has_default": true,
                        "default": null
                    },
                    {
                        "name": "from_date",
                        "has_default": true,
                        "default": null
                    },
                    {
                        "name": "to_date",
                        "has_default": true,
                        "default": null
                    },
                    {
                        "name": "resolution",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "request timeserie data to use for reporting",
                    "params": [
                        "string $provider provider class name",
                        "string $from_date from timestamp",
                        "string $to_date to timestamp",
                        "string $resolution resolution in seconds"
                    ],
                    "throws": [],
                    "return": "string csv output"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Diagnostics\\Api\\PacketCaptureController": {
        "name": "OPNsense\\Diagnostics\\Api\\PacketCaptureController",
        "namespace": "OPNsense\\Diagnostics\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "set",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "set / create capture job",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "start",
                "method": "POST",
                "parameters": [
                    {
                        "name": "jobid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "start capture job",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "stop",
                "method": "POST",
                "parameters": [
                    {
                        "name": "jobid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "stop capture job",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "remove",
                "method": "POST",
                "parameters": [
                    {
                        "name": "jobid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "remove capture job",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "view",
                "method": "GET",
                "parameters": [
                    {
                        "name": "jobid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "detail",
                        "has_default": true,
                        "default": "normal"
                    }
                ],
                "doc": {
                    "description": "view capture",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "download",
                "method": "GET",
                "parameters": [
                    {
                        "name": "jobid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "download pcap(s)",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "macInfo",
                "method": "GET",
                "parameters": [
                    {
                        "name": "macaddr",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "fetch mac info",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchJobs",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "search current capture jobs",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Diagnostics\\PacketCapture",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Diagnostics\\Api\\PortprobeController": {
        "name": "OPNsense\\Diagnostics\\Api\\PortprobeController",
        "namespace": "OPNsense\\Diagnostics\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "set",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Diagnostics\\Portprobe",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Diagnostics\\Api\\SystemController": {
        "name": "OPNsense\\Diagnostics\\Api\\SystemController",
        "namespace": "OPNsense\\Diagnostics\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "memory",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "systemInformation",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "systemTime",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "systemResources",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "systemDisk",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "systemMbuf",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "systemSwap",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "systemTemperature",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Diagnostics\\Api\\SystemhealthController": {
        "name": "OPNsense\\Diagnostics\\Api\\SystemhealthController",
        "namespace": "OPNsense\\Diagnostics\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "getRRDlist",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve Available RRD data",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "getSystemHealth",
                "method": "GET",
                "parameters": [
                    {
                        "name": "rrd",
                        "has_default": true,
                        "default": ""
                    },
                    {
                        "name": "detail",
                        "has_default": true,
                        "default": -1
                    }
                ],
                "doc": {
                    "description": "retrieve SystemHealth Data (previously called RRD Graphs) ",
                    "params": [
                        "string $rrd",
                        "int $detail"
                    ],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "getInterfaces",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve network interfaces by key (lan, wan, opt1,..)",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "exportAsCSV",
                "method": "GET",
                "parameters": [
                    {
                        "name": "rrd",
                        "has_default": true,
                        "default": ""
                    },
                    {
                        "name": "detail",
                        "has_default": true,
                        "default": -1
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Diagnostics\\Api\\TracerouteController": {
        "name": "OPNsense\\Diagnostics\\Api\\TracerouteController",
        "namespace": "OPNsense\\Diagnostics\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "set",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Diagnostics\\Traceroute",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Diagnostics\\Api\\TrafficController": {
        "name": "OPNsense\\Diagnostics\\Api\\TrafficController",
        "namespace": "OPNsense\\Diagnostics\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "Interface",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve interface traffic stats",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "stream",
                "method": "GET",
                "parameters": [
                    {
                        "name": "poll_interval",
                        "has_default": true,
                        "default": 1
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "Top",
                "method": "GET",
                "parameters": [
                    {
                        "name": "interfaces",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "retrieve interface top traffic hosts",
                    "params": [
                        "$interfaces string comma separated list of interfaces"
                    ],
                    "throws": [],
                    "return": "array"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Diagnostics\\Api\\PingController": {
        "name": "OPNsense\\Diagnostics\\Api\\PingController",
        "namespace": "OPNsense\\Diagnostics\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "set",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "set / create ping job",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "start",
                "method": "POST",
                "parameters": [
                    {
                        "name": "jobid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "start ping job",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "stop",
                "method": "POST",
                "parameters": [
                    {
                        "name": "jobid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "stop ping job",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "remove",
                "method": "POST",
                "parameters": [
                    {
                        "name": "jobid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "remove ping job",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchJobs",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "search current ping jobs",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Diagnostics\\Ping",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Dnsmasq\\Api\\LeasesController": {
        "name": "OPNsense\\Dnsmasq\\Api\\LeasesController",
        "namespace": "OPNsense\\Dnsmasq\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "search",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Dnsmasq\\Api\\ServiceController": {
        "name": "OPNsense\\Dnsmasq\\Api\\ServiceController",
        "namespace": "OPNsense\\Dnsmasq\\Api",
        "parent": "OPNsense\\Base\\ApiMutableServiceControllerBase",
        "methods": [
            {
                "name": "start",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "start service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array"
                }
            },
            {
                "name": "stop",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "stop service",
                    "params": [],
                    "throws": "\\Exception when configd actions fails",
                    "return": "array"
                }
            },
            {
                "name": "restart",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "restart service",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reconfigure with optional stop, generate config and start / reload",
                    "params": [],
                    "throws": "\\ReflectionException when model can't be instantiated",
                    "return": "array response message"
                }
            },
            {
                "name": "status",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve status of service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array response message"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Dnsmasq\\Api\\SettingsController": {
        "name": "OPNsense\\Dnsmasq\\Api\\SettingsController",
        "namespace": "OPNsense\\Dnsmasq\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "searchHost",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getHost",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setHost",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addHost",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delHost",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "downloadHosts",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "uploadHosts",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchDomain",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getDomain",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setDomain",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addDomain",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delDomain",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchTag",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getTag",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setTag",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addTag",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delTag",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchRange",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getRange",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setRange",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addRange",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delRange",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchOption",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getOption",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setOption",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addOption",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delOption",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchMatch",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getMatch",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setMatch",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addMatch",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delMatch",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchBoot",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getBoot",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setBoot",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addBoot",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delBoot",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "\\OPNsense\\Dnsmasq\\Dnsmasq",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Firewall\\Api\\AliasUtilController": {
        "name": "OPNsense\\Firewall\\Api\\AliasUtilController",
        "namespace": "OPNsense\\Firewall\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "aliases",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list active alias tables",
                    "params": [],
                    "throws": [],
                    "return": "array alias names"
                }
            },
            {
                "name": "list",
                "method": "POST",
                "parameters": [
                    {
                        "name": "alias",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "list alias table",
                    "params": [
                        "string $alias name to list"
                    ],
                    "throws": "\\Exception",
                    "return": "array alias contents"
                }
            },
            {
                "name": "updateBogons",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "update bogons table",
                    "params": [],
                    "throws": [],
                    "return": "array status"
                }
            },
            {
                "name": "flush",
                "method": "POST",
                "parameters": [
                    {
                        "name": "alias",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "flush alias table",
                    "params": [
                        "string $alias name to flush"
                    ],
                    "throws": [],
                    "return": "array status"
                }
            },
            {
                "name": "delete",
                "method": "POST",
                "parameters": [
                    {
                        "name": "alias",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "delete item from alias table",
                    "params": [
                        "string $alias name"
                    ],
                    "throws": [],
                    "return": "array status"
                }
            },
            {
                "name": "add",
                "method": "POST",
                "parameters": [
                    {
                        "name": "alias",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "add item to alias table",
                    "params": [
                        "string $alias name"
                    ],
                    "throws": [],
                    "return": "array status"
                }
            },
            {
                "name": "findReferences",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "API handler to look up in which rules an IP is used (either explicitly or included in a range).                only present if the call was successful.)",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array Array with indexes 'status' (whether the call succeeded) and 'matches' (which rules match this IP,"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Firewall\\Api\\CategoryController": {
        "name": "OPNsense\\Firewall\\Api\\CategoryController",
        "namespace": "OPNsense\\Firewall\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "searchItem",
                "method": "*",
                "parameters": [
                    {
                        "name": "add_empty",
                        "has_default": true,
                        "default": "0"
                    }
                ],
                "doc": {
                    "description": "search categories",
                    "params": [],
                    "throws": "\\ReflectionException",
                    "return": "array search results"
                }
            },
            {
                "name": "setItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Update category with given properties",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "addItem",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Add new category and set with attributes from post",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "getItem",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Retrieve category settings or return defaults for new one",
                    "params": [
                        "$uuid item unique id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array category content"
                }
            },
            {
                "name": "delItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Delete alias by uuid, save contents to tmp for removal on apply",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\OPNsense\\Base\\UserException when unable to delete",
                    "return": "array save status"
                }
            }
        ],
        "model": "OPNsense\\Firewall\\Category",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Firewall\\Api\\FilterBaseController": {
        "name": "OPNsense\\Firewall\\Api\\FilterBaseController",
        "namespace": "OPNsense\\Firewall\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "listCategories",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list categories and usage",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "listNetworkSelectOptions",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list of available network options",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "apply",
                "method": "POST",
                "parameters": [
                    {
                        "name": "rollback_revision",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "cancelRollback",
                "method": "POST",
                "parameters": [
                    {
                        "name": "rollback_revision",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "savepoint",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "revert",
                "method": "POST",
                "parameters": [
                    {
                        "name": "revision",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Firewall\\Filter",
        "is_abstract": true,
        "doc": null
    },
    "OPNsense\\Firewall\\Api\\FilterController": {
        "name": "OPNsense\\Firewall\\Api\\FilterController",
        "namespace": "OPNsense\\Firewall\\Api",
        "parent": "OPNsense\\Firewall\\Api\\FilterBaseController",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "listCategories",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list categories and usage",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "listNetworkSelectOptions",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list of available network options",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "apply",
                "method": "POST",
                "parameters": [
                    {
                        "name": "rollback_revision",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "cancelRollback",
                "method": "POST",
                "parameters": [
                    {
                        "name": "rollback_revision",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "savepoint",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "revert",
                "method": "POST",
                "parameters": [
                    {
                        "name": "revision",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchRule",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addRule",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getRule",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggleRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Firewall\\Filter",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Firewall\\Api\\FilterUtilController": {
        "name": "OPNsense\\Firewall\\Api\\FilterUtilController",
        "namespace": "OPNsense\\Firewall\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "ruleStats",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "return rule statistics",
                    "params": [],
                    "throws": [],
                    "return": "array statistics"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Firewall\\Api\\GroupController": {
        "name": "OPNsense\\Firewall\\Api\\GroupController",
        "namespace": "OPNsense\\Firewall\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "searchItem",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "search groups",
                    "params": [],
                    "throws": "\\ReflectionException",
                    "return": "array search results"
                }
            },
            {
                "name": "setItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Update group with given properties",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "addItem",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Add new group and set with attributes from post",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "getItem",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Retrieve group settings or return defaults for new one",
                    "params": [
                        "$uuid item unique id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array group content"
                }
            },
            {
                "name": "delItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Delete alias by uuid, save contents to tmp for removal on apply",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\OPNsense\\Base\\UserException when unable to delete",
                    "return": "array save status"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reconfigure groups",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Firewall\\Group",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Firewall\\Api\\NptController": {
        "name": "OPNsense\\Firewall\\Api\\NptController",
        "namespace": "OPNsense\\Firewall\\Api",
        "parent": "OPNsense\\Firewall\\Api\\FilterBaseController",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "listCategories",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list categories and usage",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "listNetworkSelectOptions",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list of available network options",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "apply",
                "method": "POST",
                "parameters": [
                    {
                        "name": "rollback_revision",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "cancelRollback",
                "method": "POST",
                "parameters": [
                    {
                        "name": "rollback_revision",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "savepoint",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "revert",
                "method": "POST",
                "parameters": [
                    {
                        "name": "revision",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchRule",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addRule",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getRule",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggleRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Firewall\\Filter",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Firewall\\Api\\OneToOneController": {
        "name": "OPNsense\\Firewall\\Api\\OneToOneController",
        "namespace": "OPNsense\\Firewall\\Api",
        "parent": "OPNsense\\Firewall\\Api\\FilterBaseController",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "listCategories",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list categories and usage",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "listNetworkSelectOptions",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list of available network options",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "apply",
                "method": "POST",
                "parameters": [
                    {
                        "name": "rollback_revision",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "cancelRollback",
                "method": "POST",
                "parameters": [
                    {
                        "name": "rollback_revision",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "savepoint",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "revert",
                "method": "POST",
                "parameters": [
                    {
                        "name": "revision",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchRule",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addRule",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getRule",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggleRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Firewall\\Filter",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Firewall\\Api\\SourceNatController": {
        "name": "OPNsense\\Firewall\\Api\\SourceNatController",
        "namespace": "OPNsense\\Firewall\\Api",
        "parent": "OPNsense\\Firewall\\Api\\FilterBaseController",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "listCategories",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list categories and usage",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "listNetworkSelectOptions",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list of available network options",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "apply",
                "method": "POST",
                "parameters": [
                    {
                        "name": "rollback_revision",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "cancelRollback",
                "method": "POST",
                "parameters": [
                    {
                        "name": "rollback_revision",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "savepoint",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "revert",
                "method": "POST",
                "parameters": [
                    {
                        "name": "revision",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchRule",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addRule",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getRule",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggleRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Firewall\\Filter",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Firewall\\Api\\AliasController": {
        "name": "OPNsense\\Firewall\\Api\\AliasController",
        "namespace": "OPNsense\\Firewall\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "searchItem",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "search aliases",
                    "params": [],
                    "throws": "\\ReflectionException",
                    "return": "array search results"
                }
            },
            {
                "name": "listCategories",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list categories and usage",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "setItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Update alias with given properties",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "addItem",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Add new alias and set with attributes from post",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "getItem",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Retrieve alias settings or return defaults for new one",
                    "params": [
                        "$uuid item unique id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array alias content"
                }
            },
            {
                "name": "getAliasUUID",
                "method": "GET",
                "parameters": [
                    {
                        "name": "name",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "find the alias uuid by name",
                    "params": [
                        "$name alias name"
                    ],
                    "throws": "\\ReflectionException",
                    "return": "array uuid"
                }
            },
            {
                "name": "delItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Delete alias by uuid, save contents to tmp for removal on apply",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\OPNsense\\Base\\UserException when unable to delete",
                    "return": "array save status"
                }
            },
            {
                "name": "toggleItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "toggle status",
                    "params": [
                        "string $uuid id to toggled",
                        "string|null $enabled set enabled by default"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array status"
                }
            },
            {
                "name": "listCountries",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list countries and regions",
                    "params": [],
                    "throws": [],
                    "return": "array indexed by country code"
                }
            },
            {
                "name": "listUserGroups",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list user groups",
                    "params": [],
                    "throws": [],
                    "return": "array user groups"
                }
            },
            {
                "name": "listNetworkAliases",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list network alias types",
                    "params": [],
                    "throws": [],
                    "return": "array indexed by country alias name"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reconfigure aliases",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getTableSize",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "get aliases load stats and table-entries limit",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "export",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "export configured aliases",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "import",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "import delivered aliases in post variable \"data\", validate all only commit when fully valid.",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getGeoIP",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "get geoip settings (and stats)",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Firewall\\Alias",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\IDS\\Api\\ServiceController": {
        "name": "OPNsense\\IDS\\Api\\ServiceController",
        "namespace": "OPNsense\\IDS\\Api",
        "parent": "OPNsense\\Base\\ApiMutableServiceControllerBase",
        "methods": [
            {
                "name": "start",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "start service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array"
                }
            },
            {
                "name": "stop",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "stop service",
                    "params": [],
                    "throws": "\\Exception when configd actions fails",
                    "return": "array"
                }
            },
            {
                "name": "restart",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "restart service",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reconfigure with optional stop, generate config and start / reload",
                    "params": [],
                    "throws": "\\ReflectionException when model can't be instantiated",
                    "return": "array response message"
                }
            },
            {
                "name": "status",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve status of service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array response message"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Reconfigure IDS",
                    "params": [],
                    "throws": "\\OPNsense\\Base\\ValidationException when one or more model validations fail",
                    "return": "array result status"
                }
            },
            {
                "name": "updateRules",
                "method": "POST",
                "parameters": [
                    {
                        "name": "wait",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Download and update rules",
                    "params": [
                        "null|string $wait wait for update to complete (default) or run in background and return message id"
                    ],
                    "throws": "\\Exception when configd action fails",
                    "return": "array result status"
                }
            },
            {
                "name": "reloadRules",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Flush rule configuration to config and reload suricata ruleset (graceful restart)",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array"
                }
            },
            {
                "name": "queryAlerts",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Query suricata alerts",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array"
                }
            },
            {
                "name": "getAlertInfo",
                "method": "GET",
                "parameters": [
                    {
                        "name": "alertId",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "fileid",
                        "has_default": true,
                        "default": ""
                    }
                ],
                "doc": {
                    "description": "Fetch alert detailed info",
                    "params": [
                        "string $alertId alert id, position in log file",
                        "string $fileid log file id number (empty for standard)"
                    ],
                    "throws": "\\Exception when configd action fails",
                    "return": "array alert info"
                }
            },
            {
                "name": "getAlertLogs",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "List all available logs",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array list of alert logs"
                }
            },
            {
                "name": "dropAlertLog",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Drop alert log",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array result status"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\IDS\\Api\\SettingsController": {
        "name": "OPNsense\\IDS\\Api\\SettingsController",
        "namespace": "OPNsense\\IDS\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "searchInstalledRules",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Search installed ids rules",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array query results"
                }
            },
            {
                "name": "getRuleInfo",
                "method": "GET",
                "parameters": [
                    {
                        "name": "sid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Get rule information",
                    "params": [
                        "string|null $sid rule identifier"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array|mixed"
                }
            },
            {
                "name": "listRuleMetadata",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "List available rule metadata",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array"
                }
            },
            {
                "name": "getRulesetproperties",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "List ruleset properties",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array result status"
                }
            },
            {
                "name": "setRulesetproperties",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update ruleset properties",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array result status"
                }
            },
            {
                "name": "listRulesets",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "List all installable rules including current status",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array|mixed list of items when $id is null otherwise the selected item is returned"
                }
            },
            {
                "name": "getRuleset",
                "method": "GET",
                "parameters": [
                    {
                        "name": "id",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Get ruleset list info (file)",
                    "params": [
                        "string $id list filename"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array|mixed list details"
                }
            },
            {
                "name": "setRuleset",
                "method": "POST",
                "parameters": [
                    {
                        "name": "filename",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Set ruleset attributes",
                    "params": [
                        "$filename rule filename (key)"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array result status"
                }
            },
            {
                "name": "toggleRuleset",
                "method": "POST",
                "parameters": [
                    {
                        "name": "filenames",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Toggle usage of rule file or set enabled / disabled depending on parameters",
                    "params": [
                        "$filenames (target) rule file name, or list of filenames separated by a comma",
                        "$enabled desired state enabled(1)/disabled(1), leave empty for toggle"
                    ],
                    "throws": "\\OPNsense\\Base\\ValidationException",
                    "return": "array status 0/1 or error"
                }
            },
            {
                "name": "toggleRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "sids",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Toggle rule enable status",
                    "params": [
                        "string $sids unique id",
                        "string|int $enabled desired state enabled(1)/disabled(1), leave empty for toggle"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array empty"
                }
            },
            {
                "name": "setRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "sid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Set rule action",
                    "params": [
                        "$sid item unique id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array result status"
                }
            },
            {
                "name": "searchUserRule",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "Search user defined rules",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array list of found user rules"
                }
            },
            {
                "name": "setUserRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Update user defined rules",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "addUserRule",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Add new user defined rule",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "getUserRule",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Get properties of user defined rule",
                    "params": [
                        "null|string $uuid user rule internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array user defined properties"
                }
            },
            {
                "name": "delUserRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Delete user rule item",
                    "params": [
                        "string $uuid user rule internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save status"
                }
            },
            {
                "name": "toggleUserRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Toggle user defined rule by uuid (enable/disable)",
                    "params": [
                        "$uuid user defined rule internal id",
                        "$enabled desired state enabled(1)/disabled(1), leave empty for toggle"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result"
                }
            },
            {
                "name": "searchPolicy",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "Search policy",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array list of found user rules"
                }
            },
            {
                "name": "setPolicy",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Update policy",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "addPolicy",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Add new policy",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "getPolicy",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Get properties of a policy",
                    "params": [
                        "null|string $uuid user rule internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array user defined properties"
                }
            },
            {
                "name": "delPolicy",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Delete policy item",
                    "params": [
                        "string $uuid user rule internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save status"
                }
            },
            {
                "name": "togglePolicy",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Toggle policy by uuid (enable/disable)",
                    "params": [
                        "$uuid user defined rule internal id",
                        "$enabled desired state enabled(1)/disabled(1), leave empty for toggle"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result"
                }
            },
            {
                "name": "searchPolicyRule",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "Search policy rule adjustment",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array list of found user rules"
                }
            },
            {
                "name": "setPolicyRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Update policy rule adjustment",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "addPolicyRule",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Add new policy rule adjustment",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "getPolicyRule",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Get properties of a policy rule adjustment",
                    "params": [
                        "null|string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array user defined properties"
                }
            },
            {
                "name": "delPolicyRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Delete policy rule adjustment item",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save status"
                }
            },
            {
                "name": "togglePolicyRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Toggle policy rule adjustment by uuid (enable/disable)",
                    "params": [
                        "$uuid user internal id",
                        "$enabled desired state enabled(1)/disabled(1), leave empty for toggle"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result"
                }
            },
            {
                "name": "checkPolicyRule",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "return the number of custom defined policy rules",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "\\OPNsense\\IDS\\IDS",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\IPsec\\Api\\ConnectionsController": {
        "name": "OPNsense\\IPsec\\Api\\ConnectionsController",
        "namespace": "OPNsense\\IPsec\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "searchConnection",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setConnection",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addConnection",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getConnection",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggleConnection",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "connectionExists",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delConnection",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchLocal",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getLocal",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setLocal",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addLocal",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggleLocal",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delLocal",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchRemote",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getRemote",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setRemote",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addRemote",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggleRemote",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delRemote",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchChild",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getChild",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setChild",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addChild",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggleChild",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delChild",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "isEnabled",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "is IPsec enabled",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggle",
                "method": "POST",
                "parameters": [
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "toggle if IPsec is enabled",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "swanctl",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Fetch the contents of swanctl.conf",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\IPsec\\Swanctl",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\IPsec\\Api\\KeyPairsController": {
        "name": "OPNsense\\IPsec\\Api\\KeyPairsController",
        "namespace": "OPNsense\\IPsec\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "searchItem",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "Search key pairs",
                    "params": [],
                    "throws": "\\ReflectionException",
                    "return": "array"
                }
            },
            {
                "name": "setItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Update key pair with given properties",
                    "params": [
                        "$uuid"
                    ],
                    "throws": "\\ReflectionException",
                    "return": "array"
                }
            },
            {
                "name": "addItem",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Add new key pair with given properties",
                    "params": [],
                    "throws": "\\ReflectionException",
                    "return": "array"
                }
            },
            {
                "name": "getItem",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Retrieve key pair or return defaults for new one",
                    "params": [
                        "$uuid"
                    ],
                    "throws": "\\ReflectionException",
                    "return": "array"
                }
            },
            {
                "name": "delItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Delete key pair by UUID",
                    "params": [
                        "$uuid"
                    ],
                    "throws": "\\ReflectionException",
                    "return": "array"
                }
            },
            {
                "name": "genKeyPair",
                "method": "GET",
                "parameters": [
                    {
                        "name": "type",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "size",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Generate keypair",
                    "params": [
                        "string $type (rsa, ecdsa)",
                        "string $size The key size in bytes"
                    ],
                    "throws": [],
                    "return": "array"
                }
            }
        ],
        "model": "OPNsense\\IPsec\\IPsec",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\IPsec\\Api\\LeasesController": {
        "name": "OPNsense\\IPsec\\Api\\LeasesController",
        "namespace": "OPNsense\\IPsec\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "search",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Search leases",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "pools",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list pools",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\IPsec\\Api\\LegacySubsystemController": {
        "name": "OPNsense\\IPsec\\Api\\LegacySubsystemController",
        "namespace": "OPNsense\\IPsec\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "status",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Returns the status of the legacy subsystem, which currently only includes a boolean specifying if the subsystem is marked as dirty, which means that there are pending changes.",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "applyConfig",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Apply the IPsec configuration using the legacy subsystem and return a message describing the result",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\IPsec\\Api\\ManualSPDController": {
        "name": "OPNsense\\IPsec\\Api\\ManualSPDController",
        "namespace": "OPNsense\\IPsec\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "search",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "add",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "get",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggle",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "del",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\IPsec\\Swanctl",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\IPsec\\Api\\PoolsController": {
        "name": "OPNsense\\IPsec\\Api\\PoolsController",
        "namespace": "OPNsense\\IPsec\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "search",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "add",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "get",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggle",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "del",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\IPsec\\Swanctl",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\IPsec\\Api\\PreSharedKeysController": {
        "name": "OPNsense\\IPsec\\Api\\PreSharedKeysController",
        "namespace": "OPNsense\\IPsec\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "searchItem",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "Search preSharedKeys",
                    "params": [],
                    "throws": "\\ReflectionException",
                    "return": "array"
                }
            },
            {
                "name": "setItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Update preSharedKey with given properties",
                    "params": [
                        "$uuid"
                    ],
                    "throws": "\\ReflectionException",
                    "return": "array"
                }
            },
            {
                "name": "addItem",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Add new preSharedKey with given properties",
                    "params": [],
                    "throws": "\\ReflectionException",
                    "return": "array"
                }
            },
            {
                "name": "getItem",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Retrieve key pair or return defaults for new one",
                    "params": [
                        "$uuid"
                    ],
                    "throws": "\\ReflectionException",
                    "return": "array"
                }
            },
            {
                "name": "delItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Delete preSharedKey by UUID",
                    "params": [
                        "$uuid"
                    ],
                    "throws": "\\ReflectionException",
                    "return": "array"
                }
            }
        ],
        "model": "OPNsense\\IPsec\\IPsec",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\IPsec\\Api\\SadController": {
        "name": "OPNsense\\IPsec\\Api\\SadController",
        "namespace": "OPNsense\\IPsec\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "search",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Search SAD entries",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "delete",
                "method": "POST",
                "parameters": [
                    {
                        "name": "id",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Remove an SPD entry",
                    "params": [
                        "string $id md 5 hash to identify the spd entry"
                    ],
                    "throws": [],
                    "return": "array"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\IPsec\\Api\\ServiceController": {
        "name": "OPNsense\\IPsec\\Api\\ServiceController",
        "namespace": "OPNsense\\IPsec\\Api",
        "parent": "OPNsense\\Base\\ApiMutableServiceControllerBase",
        "methods": [
            {
                "name": "start",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "start service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array"
                }
            },
            {
                "name": "stop",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "stop service",
                    "params": [],
                    "throws": "\\Exception when configd actions fails",
                    "return": "array"
                }
            },
            {
                "name": "restart",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "restart service",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reconfigure with optional stop, generate config and start / reload",
                    "params": [],
                    "throws": "\\ReflectionException when model can't be instantiated",
                    "return": "array response message"
                }
            },
            {
                "name": "status",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve status of service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array response message"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\IPsec\\Api\\SessionsController": {
        "name": "OPNsense\\IPsec\\Api\\SessionsController",
        "namespace": "OPNsense\\IPsec\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "searchPhase1",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Search phase 1 session entries",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "searchPhase2",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Search phase 2 session entries",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "connect",
                "method": "POST",
                "parameters": [
                    {
                        "name": "id",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "connect a session",
                    "params": [
                        "string $id md 5 hash to identify the spd entry"
                    ],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "disconnect",
                "method": "POST",
                "parameters": [
                    {
                        "name": "id",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "disconnect a session",
                    "params": [
                        "string $id md 5 hash to identify the spd entry"
                    ],
                    "throws": [],
                    "return": "array"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\IPsec\\Api\\SettingsController": {
        "name": "OPNsense\\IPsec\\Api\\SettingsController",
        "namespace": "OPNsense\\IPsec\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            }
        ],
        "model": "OPNsense\\IPsec\\IPsec",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\IPsec\\Api\\SpdController": {
        "name": "OPNsense\\IPsec\\Api\\SpdController",
        "namespace": "OPNsense\\IPsec\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "search",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Search SPD entries",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "delete",
                "method": "POST",
                "parameters": [
                    {
                        "name": "id",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Remove an SPD entry",
                    "params": [
                        "string $id md 5 hash to identify the spd entry"
                    ],
                    "throws": [],
                    "return": "array"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\IPsec\\Api\\TunnelController": {
        "name": "OPNsense\\IPsec\\Api\\TunnelController",
        "namespace": "OPNsense\\IPsec\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "searchPhase1",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchPhase2",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delPhase1",
                "method": "POST",
                "parameters": [
                    {
                        "name": "ikeid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "delete phase 1 including associated phase 2 entries",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "togglePhase1",
                "method": "POST",
                "parameters": [
                    {
                        "name": "ikeid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "toggle if phase 1 is enabled",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delPhase2",
                "method": "POST",
                "parameters": [
                    {
                        "name": "seqid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "delete phase 2 entry",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "togglePhase2",
                "method": "POST",
                "parameters": [
                    {
                        "name": "seqid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "toggle if phase 2 is enabled",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggle",
                "method": "POST",
                "parameters": [
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "toggle if IPsec is enabled",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\IPsec\\Api\\VtiController": {
        "name": "OPNsense\\IPsec\\Api\\VtiController",
        "namespace": "OPNsense\\IPsec\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "search",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "add",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "get",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggle",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "del",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\IPsec\\Swanctl",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Interfaces\\Api\\GifSettingsController": {
        "name": "OPNsense\\Interfaces\\Api\\GifSettingsController",
        "namespace": "OPNsense\\Interfaces\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "searchItem",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "search gifs",
                    "params": [],
                    "throws": [],
                    "return": "array search results"
                }
            },
            {
                "name": "setItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Update gif with given properties",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": [],
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "addItem",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Add new gif and set with attributes from post",
                    "params": [],
                    "throws": [],
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "getItem",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Retrieve gif settings or return defaults for new one",
                    "params": [
                        "$uuid item unique id"
                    ],
                    "throws": [],
                    "return": "array gif content"
                }
            },
            {
                "name": "delItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Delete gif by uuid",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": [],
                    "return": "array save status"
                }
            },
            {
                "name": "getIfOptions",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reconfigure gifs",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Interfaces\\Gif",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Interfaces\\Api\\GreSettingsController": {
        "name": "OPNsense\\Interfaces\\Api\\GreSettingsController",
        "namespace": "OPNsense\\Interfaces\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "searchItem",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "search gres",
                    "params": [],
                    "throws": [],
                    "return": "array search results"
                }
            },
            {
                "name": "setItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Update gre with given properties",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": [],
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "addItem",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Add new gre and set with attributes from post",
                    "params": [],
                    "throws": [],
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "getItem",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Retrieve gre settings or return defaults for new one",
                    "params": [
                        "$uuid item unique id"
                    ],
                    "throws": [],
                    "return": "array gre content"
                }
            },
            {
                "name": "delItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Delete gre by uuid",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": [],
                    "return": "array save status"
                }
            },
            {
                "name": "getIfOptions",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reconfigure gres",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Interfaces\\Gre",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Interfaces\\Api\\LaggSettingsController": {
        "name": "OPNsense\\Interfaces\\Api\\LaggSettingsController",
        "namespace": "OPNsense\\Interfaces\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "searchItem",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "search laggs",
                    "params": [],
                    "throws": [],
                    "return": "array search results"
                }
            },
            {
                "name": "setItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Update lagg with given properties",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": [],
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "addItem",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Add new lagg and set with attributes from post",
                    "params": [],
                    "throws": [],
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "getItem",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Retrieve lagg settings or return defaults for new one",
                    "params": [
                        "$uuid item unique id"
                    ],
                    "throws": [],
                    "return": "array lagg content"
                }
            },
            {
                "name": "delItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Delete lagg by uuid",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": [],
                    "return": "array save status"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reconfigure laggs",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Interfaces\\Lagg",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Interfaces\\Api\\LoopbackSettingsController": {
        "name": "OPNsense\\Interfaces\\Api\\LoopbackSettingsController",
        "namespace": "OPNsense\\Interfaces\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "searchItem",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addItem",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getItem",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Interfaces\\Loopback",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Interfaces\\Api\\NeighborSettingsController": {
        "name": "OPNsense\\Interfaces\\Api\\NeighborSettingsController",
        "namespace": "OPNsense\\Interfaces\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "searchItem",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addItem",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getItem",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Interfaces\\Neighbor",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Interfaces\\Api\\OverviewController": {
        "name": "OPNsense\\Interfaces\\Api\\OverviewController",
        "namespace": "OPNsense\\Interfaces\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "interfacesInfo",
                "method": "GET",
                "parameters": [
                    {
                        "name": "details",
                        "has_default": true,
                        "default": false
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getInterface",
                "method": "GET",
                "parameters": [
                    {
                        "name": "if",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "reloadInterface",
                "method": "GET",
                "parameters": [
                    {
                        "name": "identifier",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "export",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Interfaces\\Api\\VipSettingsController": {
        "name": "OPNsense\\Interfaces\\Api\\VipSettingsController",
        "namespace": "OPNsense\\Interfaces\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "getUnusedVhid",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve first unused VHID number",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchItem",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setItem",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addItem",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getItem",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Interfaces\\Vip",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Interfaces\\Api\\VlanSettingsController": {
        "name": "OPNsense\\Interfaces\\Api\\VlanSettingsController",
        "namespace": "OPNsense\\Interfaces\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "searchItem",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addItem",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getItem",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Interfaces\\Vlan",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Interfaces\\Api\\VxlanSettingsController": {
        "name": "OPNsense\\Interfaces\\Api\\VxlanSettingsController",
        "namespace": "OPNsense\\Interfaces\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "searchItem",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addItem",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getItem",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delItem",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Interfaces\\VxLan",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Kea\\Api\\CtrlAgentController": {
        "name": "OPNsense\\Kea\\Api\\CtrlAgentController",
        "namespace": "OPNsense\\Kea\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            }
        ],
        "model": "OPNsense\\Kea\\KeaCtrlAgent",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Kea\\Api\\Dhcpv4Controller": {
        "name": "OPNsense\\Kea\\Api\\Dhcpv4Controller",
        "namespace": "OPNsense\\Kea\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "searchSubnet",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setSubnet",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addSubnet",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getSubnet",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delSubnet",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchReservation",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setReservation",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addReservation",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getReservation",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delReservation",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "downloadReservations",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "uploadReservations",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchPeer",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setPeer",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addPeer",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getPeer",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delPeer",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Kea\\KeaDhcpv4",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Kea\\Api\\Leases4Controller": {
        "name": "OPNsense\\Kea\\Api\\Leases4Controller",
        "namespace": "OPNsense\\Kea\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "search",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Kea\\Api\\ServiceController": {
        "name": "OPNsense\\Kea\\Api\\ServiceController",
        "namespace": "OPNsense\\Kea\\Api",
        "parent": "OPNsense\\Base\\ApiMutableServiceControllerBase",
        "methods": [
            {
                "name": "start",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "start service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array"
                }
            },
            {
                "name": "stop",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "stop service",
                    "params": [],
                    "throws": "\\Exception when configd actions fails",
                    "return": "array"
                }
            },
            {
                "name": "restart",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "restart service",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reconfigure with optional stop, generate config and start / reload",
                    "params": [],
                    "throws": "\\ReflectionException when model can't be instantiated",
                    "return": "array response message"
                }
            },
            {
                "name": "status",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve status of service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array response message"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Monit\\Api\\ServiceController": {
        "name": "OPNsense\\Monit\\Api\\ServiceController",
        "namespace": "OPNsense\\Monit\\Api",
        "parent": "OPNsense\\Base\\ApiMutableServiceControllerBase",
        "methods": [
            {
                "name": "start",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "start service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array"
                }
            },
            {
                "name": "stop",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "stop service",
                    "params": [],
                    "throws": "\\Exception when configd actions fails",
                    "return": "array"
                }
            },
            {
                "name": "restart",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "restart service",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reconfigure with optional stop, generate config and start / reload",
                    "params": [],
                    "throws": "\\ReflectionException when model can't be instantiated",
                    "return": "array response message"
                }
            },
            {
                "name": "status",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve status of service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array response message"
                }
            },
            {
                "name": "check",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "test monit configuration",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reconfigure monit",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Monit\\Api\\SettingsController": {
        "name": "OPNsense\\Monit\\Api\\SettingsController",
        "namespace": "OPNsense\\Monit\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "dirty",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "check if changes to the monit settings were made",
                    "params": [],
                    "throws": [],
                    "return": "array result"
                }
            },
            {
                "name": "getAlert",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Retrieve alert settings or return defaults",
                    "params": [
                        "$uuid item unique id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array monit alert content"
                }
            },
            {
                "name": "setAlert",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Update alert with given properties",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "addAlert",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Add alert with given properties",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "delAlert",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Delete alert by uuid",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save status"
                }
            },
            {
                "name": "searchAlert",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "Search monit alerts",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array list of found alerts"
                }
            },
            {
                "name": "toggleAlert",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Toggle alert defined by uuid (enable/disable)",
                    "params": [
                        "$uuid alert internal id",
                        "$enabled desired state enabled(1)/disabled(1), leave empty for toggle"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result"
                }
            },
            {
                "name": "getService",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Retrieve service settings or return defaults",
                    "params": [
                        "$uuid item unique id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array monit service content"
                }
            },
            {
                "name": "setService",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Update service with given properties",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "addService",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Add service with given properties",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "delService",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Delete service by uuid",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save status"
                }
            },
            {
                "name": "searchService",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Search monit services",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array list of found services"
                }
            },
            {
                "name": "toggleService",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Toggle service defined by uuid (enable/disable)",
                    "params": [
                        "$uuid service internal id",
                        "$enabled desired state enabled(1)/disabled(1), leave empty for toggle"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result"
                }
            },
            {
                "name": "getTest",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Retrieve test settings or return defaults",
                    "params": [
                        "$uuid item unique id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array monit test content"
                }
            },
            {
                "name": "setTest",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Update test with given properties",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "addTest",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Add test with given properties",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "delTest",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Delete test by uuid",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save status"
                }
            },
            {
                "name": "searchTest",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Search monit services",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array list of found services"
                }
            },
            {
                "name": "getGeneral",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve general settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array monit general settings content"
                }
            }
        ],
        "model": "OPNsense\\Monit\\Monit",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Monit\\Api\\StatusController": {
        "name": "OPNsense\\Monit\\Api\\StatusController",
        "namespace": "OPNsense\\Monit\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [
                    {
                        "name": "format",
                        "has_default": true,
                        "default": "xml"
                    }
                ],
                "doc": {
                    "description": "get monit status page see monit(1)",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\OpenVPN\\Api\\ClientOverwritesController": {
        "name": "OPNsense\\OpenVPN\\Api\\ClientOverwritesController",
        "namespace": "OPNsense\\OpenVPN\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "search",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "get",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "add",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "del",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggle",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\OpenVPN\\OpenVPN",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\OpenVPN\\Api\\ExportController": {
        "name": "OPNsense\\OpenVPN\\Api\\ExportController",
        "namespace": "OPNsense\\OpenVPN\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "providers",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list providers",
                    "params": [],
                    "throws": "\\Exception when unable to contact configd",
                    "return": "array list of configured openvpn providers (servers)"
                }
            },
            {
                "name": "accounts",
                "method": "GET",
                "parameters": [
                    {
                        "name": "vpnid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "list configured accounts",
                    "params": [
                        "string $vpnid server handle"
                    ],
                    "throws": [],
                    "return": "array list of configured accounts"
                }
            },
            {
                "name": "templates",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "list configured export options (client types)",
                    "params": [],
                    "throws": [],
                    "return": "array list of templates"
                }
            },
            {
                "name": "validatePresets",
                "method": "POST",
                "parameters": [
                    {
                        "name": "vpnid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "validate user/model input for configurable options",
                    "params": [
                        "$vpnid server handle"
                    ],
                    "throws": "\\OPNsense\\Base\\ModelException",
                    "return": "array status and validation output"
                }
            },
            {
                "name": "storePresets",
                "method": "POST",
                "parameters": [
                    {
                        "name": "vpnid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "store presets when valid and changed",
                    "params": [
                        "$vpnid server handle"
                    ],
                    "throws": "\\OPNsense\\Base\\ModelException",
                    "return": "array status and validation output"
                }
            },
            {
                "name": "download",
                "method": "POST",
                "parameters": [
                    {
                        "name": "vpnid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "certref",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "download configuration",
                    "params": [
                        "string $vpnid server handle",
                        "string $certref certificate to export if applicable"
                    ],
                    "throws": "UserException when invalid user input",
                    "return": "array"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\OpenVPN\\Api\\InstancesController": {
        "name": "OPNsense\\OpenVPN\\Api\\InstancesController",
        "namespace": "OPNsense\\OpenVPN\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "search",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "get",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "add",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "del",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggle",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchStaticKey",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "static key administration",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getStaticKey",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addStaticKey",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setStaticKey",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delStaticKey",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "genKey",
                "method": "GET",
                "parameters": [
                    {
                        "name": "type",
                        "has_default": true,
                        "default": "secret"
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\OpenVPN\\OpenVPN",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\OpenVPN\\Api\\ServiceController": {
        "name": "OPNsense\\OpenVPN\\Api\\ServiceController",
        "namespace": "OPNsense\\OpenVPN\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "searchSessions",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Search sessions",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "searchRoutes",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Search routes",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "killSession",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "kill session by source ip:port or common name",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "startService",
                "method": "POST",
                "parameters": [
                    {
                        "name": "id",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        "int $id server/client id to start"
                    ],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "stopService",
                "method": "POST",
                "parameters": [
                    {
                        "name": "id",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        "int $id server/client id to stop"
                    ],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "restartService",
                "method": "POST",
                "parameters": [
                    {
                        "name": "id",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        "int $id server/client id to restart"
                    ],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Routes\\Api\\GatewayController": {
        "name": "OPNsense\\Routes\\Api\\GatewayController",
        "namespace": "OPNsense\\Routes\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "status",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Routes\\Api\\RoutesController": {
        "name": "OPNsense\\Routes\\Api\\RoutesController",
        "namespace": "OPNsense\\Routes\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "searchroute",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "search routes",
                    "params": [],
                    "throws": "\\ReflectionException",
                    "return": "array search results"
                }
            },
            {
                "name": "setroute",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Update route with given properties",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "addroute",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Add new route and set with attributes from post",
                    "params": [],
                    "throws": "\\ReflectionException",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "getroute",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Retrieve route settings or return defaults for new one",
                    "params": [
                        "$uuid item unique id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array route content"
                }
            },
            {
                "name": "delroute",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Delete route by uuid, save contents to tmp for removal on apply",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\OPNsense\\Base\\ModelException when not bound to model",
                    "return": "array save status"
                }
            },
            {
                "name": "toggleroute",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "disabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "toggle, we can not use our default action here since enabled/disabled are swapped",
                    "params": [
                        "string $uuid id to toggled",
                        "string|null $disabled set disabled by default"
                    ],
                    "throws": "\\OPNsense\\Base\\ModelException when not bound to model",
                    "return": "array status"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reconfigure routes",
                    "params": [],
                    "throws": "\\Exception when unable to execute configd command",
                    "return": "array reconfigure status"
                }
            }
        ],
        "model": "\\OPNsense\\Routes\\Route",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Routing\\Api\\SettingsController": {
        "name": "OPNsense\\Routing\\Api\\SettingsController",
        "namespace": "OPNsense\\Routing\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchGateway",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getGateway",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setGateway",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addGateway",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delGateway",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggleGateway",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "\\OPNsense\\Routing\\Gateways",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Syslog\\Api\\ServiceController": {
        "name": "OPNsense\\Syslog\\Api\\ServiceController",
        "namespace": "OPNsense\\Syslog\\Api",
        "parent": "OPNsense\\Base\\ApiMutableServiceControllerBase",
        "methods": [
            {
                "name": "start",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "start service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array"
                }
            },
            {
                "name": "stop",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "stop service",
                    "params": [],
                    "throws": "\\Exception when configd actions fails",
                    "return": "array"
                }
            },
            {
                "name": "restart",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "restart service",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reconfigure with optional stop, generate config and start / reload",
                    "params": [],
                    "throws": "\\ReflectionException when model can't be instantiated",
                    "return": "array response message"
                }
            },
            {
                "name": "status",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve status of service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array response message"
                }
            },
            {
                "name": "reset",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reset local logging",
                    "params": [],
                    "throws": [],
                    "return": "status array"
                }
            },
            {
                "name": "stats",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "fetch syslog-ng statistics",
                    "params": [],
                    "throws": [],
                    "return": "array of stat records"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Syslog\\Api\\SettingsController": {
        "name": "OPNsense\\Syslog\\Api\\SettingsController",
        "namespace": "OPNsense\\Syslog\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "searchDestinations",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "Search syslog destinations",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array list of found rules"
                }
            },
            {
                "name": "getDestination",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Retrieve destination settings or return defaults for a new one",
                    "params": [
                        "$uuid item unique id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array destination content"
                }
            },
            {
                "name": "setDestination",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Update destination with given properties",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "addDestination",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Add new destination and set with attributes from post",
                    "params": [],
                    "throws": "\\OPNsense\\Base\\ValidationException when field validations fail",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "delDestination",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Delete destination by uuid",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save status"
                }
            },
            {
                "name": "toggleDestination",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Toggle destination defined by uuid (enable/disable)",
                    "params": [
                        "$uuid user defined rule internal id",
                        "$enabled desired state enabled(1)/disabled(1), leave empty for toggle"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result"
                }
            }
        ],
        "model": "\\OPNsense\\Syslog\\Syslog",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\TrafficShaper\\Api\\ServiceController": {
        "name": "OPNsense\\TrafficShaper\\Api\\ServiceController",
        "namespace": "OPNsense\\TrafficShaper\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reconfigure shaper/ipfw, generate config and reload",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "flushreload",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "flush all ipfw rules",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "statistics",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "fetch current statistics",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\TrafficShaper\\Api\\SettingsController": {
        "name": "OPNsense\\TrafficShaper\\Api\\SettingsController",
        "namespace": "OPNsense\\TrafficShaper\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "getPipe",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Retrieve pipe settings or return defaults",
                    "params": [
                        "$uuid item unique id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array traffic shaper pipe content"
                }
            },
            {
                "name": "setPipe",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Update  pipe with given properties",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "addPipe",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Add new pipe and set with attributes from post",
                    "params": [],
                    "throws": "\\OPNsense\\Base\\ValidationException when field validations fail",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "delPipe",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Delete pipe by uuid",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save status"
                }
            },
            {
                "name": "togglePipe",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Toggle pipe defined by uuid (enable/disable)",
                    "params": [
                        "$uuid user defined rule internal id",
                        "$enabled desired state enabled(1)/disabled(1), leave empty for toggle"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result"
                }
            },
            {
                "name": "searchPipes",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "Search traffic shaper pipes",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array list of found pipes"
                }
            },
            {
                "name": "searchQueues",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "Search traffic shaper queues",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array list of found queues"
                }
            },
            {
                "name": "getQueue",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Retrieve queue settings or return defaults",
                    "params": [
                        "$uuid item unique id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array traffic shaper queue content"
                }
            },
            {
                "name": "setQueue",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Update queue with given properties",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "addQueue",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Add new queue and set with attributes from post",
                    "params": [],
                    "throws": "\\OPNsense\\Base\\ModelException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "delQueue",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Delete queue by uuid",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save status"
                }
            },
            {
                "name": "toggleQueue",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Toggle queue defined by uuid (enable/disable)",
                    "params": [
                        "$uuid user defined rule internal id",
                        "$enabled desired state enabled(1)/disabled(1), leave empty for toggle"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result"
                }
            },
            {
                "name": "searchRules",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "Search traffic shaper rules",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array list of found rules"
                }
            },
            {
                "name": "getRule",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Retrieve rule settings or return defaults for new rule",
                    "params": [
                        "$uuid item unique id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array traffic shaper rule content"
                }
            },
            {
                "name": "setRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Update rule with given properties",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "addRule",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Add new rule and set with attributes from post",
                    "params": [],
                    "throws": "\\OPNsense\\Base\\ValidationException when field validations fail",
                    "return": "array save result + validation output"
                }
            },
            {
                "name": "delRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Delete rule by uuid",
                    "params": [
                        "string $uuid internal id"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save status"
                }
            },
            {
                "name": "toggleRule",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "Toggle rule defined by uuid (enable/disable)",
                    "params": [
                        "$uuid user defined rule internal id",
                        "$enabled desired state enabled(1)/disabled(1), leave empty for toggle"
                    ],
                    "throws": "\\ReflectionException when not bound to model",
                    "return": "array save result"
                }
            }
        ],
        "model": "\\OPNsense\\TrafficShaper\\TrafficShaper",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Trust\\Api\\CaController": {
        "name": "OPNsense\\Trust\\Api\\CaController",
        "namespace": "OPNsense\\Trust\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "search",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "get",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "add",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "del",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "caInfo",
                "method": "GET",
                "parameters": [
                    {
                        "name": "caref",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "rawDump",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "caList",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "generateFile",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    },
                    {
                        "name": "type",
                        "has_default": true,
                        "default": "crt"
                    }
                ],
                "doc": {
                    "description": "generate file download content                  $_POST['password'] my contain an optional password for the pkcs12 format",
                    "params": [
                        "string $uuid certificate reference",
                        "string $type one of crt/prv/pkcs12,"
                    ],
                    "throws": [],
                    "return": "array"
                }
            }
        ],
        "model": "OPNsense\\Trust\\Ca",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Trust\\Api\\CertController": {
        "name": "OPNsense\\Trust\\Api\\CertController",
        "namespace": "OPNsense\\Trust\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "search",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "get",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "add",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "del",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "caInfo",
                "method": "GET",
                "parameters": [
                    {
                        "name": "caref",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "rawDump",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "caList",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "userList",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": "list of users when the logged in user is allowed to query usermanagement"
                }
            },
            {
                "name": "generateFile",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    },
                    {
                        "name": "type",
                        "has_default": true,
                        "default": "crt"
                    }
                ],
                "doc": {
                    "description": "generate file download content                  $_POST['password'] my contain an optional password for the pkcs12 format",
                    "params": [
                        "string $uuid certificate reference",
                        "string $type one of crt/prv/pkcs12,"
                    ],
                    "throws": [],
                    "return": "array"
                }
            }
        ],
        "model": "OPNsense\\Trust\\Cert",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Trust\\Api\\CrlController": {
        "name": "OPNsense\\Trust\\Api\\CrlController",
        "namespace": "OPNsense\\Trust\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "search",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "get",
                "method": "GET",
                "parameters": [
                    {
                        "name": "caref",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "fetch (a new) revocation list for a given autority.",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "set",
                "method": "GET",
                "parameters": [
                    {
                        "name": "caref",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "set crl for a certificate authority, mimicking standard model operations (which we can not use due to the nested structure of the CRL's)",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "del",
                "method": "GET",
                "parameters": [
                    {
                        "name": "caref",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "drop CRL by certificate reference",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "rawDump",
                "method": "GET",
                "parameters": [
                    {
                        "name": "caref",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getOcspInfoData",
                "method": "GET",
                "parameters": [
                    {
                        "name": "caref",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "for demonstration purposes, we need a CA index file as specified at https://pki-tutorial.readthedocs.io/en/latest/cadb.html",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Trust\\Api\\SettingsController": {
        "name": "OPNsense\\Trust\\Api\\SettingsController",
        "namespace": "OPNsense\\Trust\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "OPNsense\\Trust\\General",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Unbound\\Api\\DiagnosticsController": {
        "name": "OPNsense\\Unbound\\Api\\DiagnosticsController",
        "namespace": "OPNsense\\Unbound\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "stats",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "reconfigure return the stats",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "dumpcache",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "return the entries of the cache",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "dumpinfra",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "listlocaldata",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "listlocalzones",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "listinsecure",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Unbound\\Api\\OverviewController": {
        "name": "OPNsense\\Unbound\\Api\\OverviewController",
        "namespace": "OPNsense\\Unbound\\Api",
        "parent": "OPNsense\\Base\\ApiControllerBase",
        "methods": [
            {
                "name": "isEnabled",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "isBlockListEnabled",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "Rolling",
                "method": "GET",
                "parameters": [
                    {
                        "name": "timeperiod",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "clients",
                        "has_default": true,
                        "default": "0"
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "totals",
                "method": "GET",
                "parameters": [
                    {
                        "name": "maximum",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchQueries",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Unbound\\Api\\ServiceController": {
        "name": "OPNsense\\Unbound\\Api\\ServiceController",
        "namespace": "OPNsense\\Unbound\\Api",
        "parent": "OPNsense\\Base\\ApiMutableServiceControllerBase",
        "methods": [
            {
                "name": "start",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "start service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array"
                }
            },
            {
                "name": "stop",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "stop service",
                    "params": [],
                    "throws": "\\Exception when configd actions fails",
                    "return": "array"
                }
            },
            {
                "name": "restart",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "restart service",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reconfigure with optional stop, generate config and start / reload",
                    "params": [],
                    "throws": "\\ReflectionException when model can't be instantiated",
                    "return": "array response message"
                }
            },
            {
                "name": "status",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve status of service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array response message"
                }
            },
            {
                "name": "dnsbl",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "reconfigureGeneral",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Only used on the general page to account for resolver_configure and dhcp hooks since these check if unbound is enabled.",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Unbound\\Api\\SettingsController": {
        "name": "OPNsense\\Unbound\\Api\\SettingsController",
        "namespace": "OPNsense\\Unbound\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "updateBlocklist",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getNameservers",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchForward",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getForward",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addForward",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delForward",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setForward",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggleForward",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchHostOverride",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getHostOverride",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addHostOverride",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delHostOverride",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setHostOverride",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggleHostOverride",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchHostAlias",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getHostAlias",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addHostAlias",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delHostAlias",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setHostAlias",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggleHostAlias",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchAcl",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getAcl",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addAcl",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delAcl",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setAcl",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggleAcl",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    },
                    {
                        "name": "enabled",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "\\OPNsense\\Unbound\\Unbound",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Wireguard\\Api\\ClientController": {
        "name": "OPNsense\\Wireguard\\Api\\ClientController",
        "namespace": "OPNsense\\Wireguard\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "psk",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "listServers",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchClient",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getClient",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addClient",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delClient",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setClient",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggleClient",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getClientBuilder",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addClientBuilder",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getServerInfo",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "\\OPNsense\\Wireguard\\Client",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Wireguard\\Api\\GeneralController": {
        "name": "OPNsense\\Wireguard\\Api\\GeneralController",
        "namespace": "OPNsense\\Wireguard\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            }
        ],
        "model": "\\OPNsense\\Wireguard\\General",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Wireguard\\Api\\ServerController": {
        "name": "OPNsense\\Wireguard\\Api\\ServerController",
        "namespace": "OPNsense\\Wireguard\\Api",
        "parent": "OPNsense\\Base\\ApiMutableModelControllerBase",
        "methods": [
            {
                "name": "get",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "Retrieve model settings",
                    "params": [],
                    "throws": "\\ReflectionException when not bound to a valid model",
                    "return": "array settings"
                }
            },
            {
                "name": "set",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "Update model settings",
                    "params": [],
                    "throws": "UserException when denied write access",
                    "return": "array status / validation errors"
                }
            },
            {
                "name": "keyPair",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "searchServer",
                "method": "*",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "getServer",
                "method": "GET",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "addServer",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "delServer",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "setServer",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": true,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            },
            {
                "name": "toggleServer",
                "method": "POST",
                "parameters": [
                    {
                        "name": "uuid",
                        "has_default": false,
                        "default": null
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": ""
                }
            }
        ],
        "model": "\\OPNsense\\Wireguard\\Server",
        "is_abstract": false,
        "doc": null
    },
    "OPNsense\\Wireguard\\Api\\ServiceController": {
        "name": "OPNsense\\Wireguard\\Api\\ServiceController",
        "namespace": "OPNsense\\Wireguard\\Api",
        "parent": "OPNsense\\Base\\ApiMutableServiceControllerBase",
        "methods": [
            {
                "name": "start",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "start service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array"
                }
            },
            {
                "name": "stop",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "stop service",
                    "params": [],
                    "throws": "\\Exception when configd actions fails",
                    "return": "array"
                }
            },
            {
                "name": "restart",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "restart service",
                    "params": [],
                    "throws": "\\Exception",
                    "return": "array"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "reconfigure with optional stop, generate config and start / reload",
                    "params": [],
                    "throws": "\\ReflectionException when model can't be instantiated",
                    "return": "array response message"
                }
            },
            {
                "name": "status",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "retrieve status of service",
                    "params": [],
                    "throws": "\\Exception when configd action fails",
                    "return": "array response message"
                }
            },
            {
                "name": "reconfigure",
                "method": "POST",
                "parameters": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            },
            {
                "name": "show",
                "method": "GET",
                "parameters": [],
                "doc": {
                    "description": "wg show all dump output",
                    "params": [],
                    "throws": [],
                    "return": "array"
                }
            }
        ],
        "model": null,
        "is_abstract": false,
        "doc": null
    }
}
