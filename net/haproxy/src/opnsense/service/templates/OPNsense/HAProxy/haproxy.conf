#
# Automatically generated configuration.
# Do not edit this file manually.
#
{%- if helpers.exists('OPNsense.HAProxy') -%}

{#- ############################### -#}
{#-        GLOBAL VARIABLES         -#}
{#- ############################### -#}

{%- if helpers.exists('OPNsense.HAProxy.general.peers') and OPNsense.HAProxy.general.peers.enabled|default("") == "1" -%}
{%-   set peers_enabled = True -%}
{%-   set peers_name = 'opnsense-haproxy-peers' -%}
{%- endif -%}

{#- ############################### -#}
{#-             MACROS              -#}
{#- ############################### -#}

{#- Macro expects a CSV list of Error Files and validates them. #}
{%- macro ErrorFiles(linkedData) -%}
{%   if linkedData is defined %}
{#     # remember all Errorfiles to avoid duplicate HTTP codes #}
{%     set http_codes_seen = [] %}
{%     for errorfile in linkedData.split(",") %}
{%       set errorfile_data = helpers.getUUID(errorfile) %}
{%       if errorfile_data.code in http_codes_seen %}
    # ERROR FILE INVALID: {{errorfile_data.name}}
    # ERROR: this HTTP code is already used by another error file in this context
{%       else %}
{%         do http_codes_seen.append(errorfile_data.code) %}
    # ERROR FILE: {{errorfile_data.name}}
    errorfile {{errorfile_data.code|replace("x", "")}} /tmp/haproxy/errorfiles/{{errorfile_data.id}}.txt
{%       endif %}
{%     endfor %}
{%   else %}
# ERROR: ErrorFiles called with empty data
{%   endif %}
{%- endmacro -%}

{# Macro expects a CSV list of Actions and validates them. #}
{%- macro AclsAndActions(linkedData) -%}
{%   if linkedData is defined %}
{#     # remember all ACLs to avoid duplicate declarations #}
{%     set acls_seen = [] %}
{%     set global_action_options = [] %}
{%     for action in linkedData.split(",") %}
{%       set action_data = helpers.getUUID(action) %}
{#       # collect ACLs for this action #}
{%       set action_acls = [] %}
{#       # collect ACL errors (may disable Action) #}
{%       set acl_errors = 0 %}
{#       # An action with no ACLs may still be valid #}
{%       if action_data.linkedAcls|default("") != "" %}
{%         for acl in action_data.linkedAcls.split(",") %}
{%           set acl_enabled = '1' %}
{%           set acl_data = helpers.getUUID(acl) %}
{#           # check if this ACL can be found in configuration #}
{%           if acl_data == {} %}
    # ERROR: ACL data not found ({{acl}})
{%             set acl_errors = acl_errors + 1 %}
{%             set acl_enabled = '0' %}
{%           else %}
{#             # first check if this ACL condition should be negated #}
{%             if acl_data.negate|default("") == '1' %}
{%               do action_acls.append('!acl_' ~ acl_data.id) if acl_data.negate|default("") == '1' %}
{%             else %}
{%               do action_acls.append('acl_' ~ acl_data.id) %}
{%             endif %}
{#             # check if this ACL was already defined in this scope #}
{%             if acl_data.id in acls_seen %}
{#  # DEBUG: ignoring duplicate ACL {{acl_data.name}} #}
{%               continue %}
{%             endif %}
{%             do acls_seen.append(acl_data.id) %}
{%             set acl_options = [] %}
{%             if acl_data.expression == 'http_auth' %}
{%               if acl_data.allowedUsers|default("") != "" or acl_data.allowedGroups|default("") != "" %}
{%                 do acl_options.append('http_auth(acl_' ~ acl_data.id ~ ')') %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'hdr_beg' %}
{%               if acl_data.hdr_beg|default("") != "" %}
{%                 do acl_options.append('hdr_beg(host) -i ' ~ acl_data.hdr_beg) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'hdr_end' %}
{%               if acl_data.hdr_end|default("") != "" %}
{%                 do acl_options.append('hdr_end(host) -i ' ~ acl_data.hdr_end) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'hdr' %}
{%               if acl_data.hdr|default("") != "" %}
{%                 do acl_options.append('hdr(host) -i ' ~ acl_data.hdr) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'hdr_reg' %}
{%               if acl_data.hdr_reg|default("") != "" %}
{%                 do acl_options.append('hdr_reg(host) -i ' ~ acl_data.hdr_reg) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'hdr_sub' %}
{%               if acl_data.hdr_sub|default("") != "" %}
{%                 do acl_options.append('hdr_sub(host) -i ' ~ acl_data.hdr_sub) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'path_beg' %}
{%               if acl_data.path_beg|default("") != "" %}
{%                 do acl_options.append('path_beg -i ' ~ acl_data.path_beg) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'path_end' %}
{%               if acl_data.path_end|default("") != "" %}
{%                 do acl_options.append('path_end -i ' ~ acl_data.path_end) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'path' %}
{%               if acl_data.path|default("") != "" %}
{%                 do acl_options.append('path -i ' ~ acl_data.path) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'path_reg' %}
{%               if acl_data.path_reg|default("") != "" %}
{%                 do acl_options.append('path_reg -i ' ~ acl_data.path_reg) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'path_dir' %}
{%               if acl_data.path_dur|default("") != "" %}
{%                 do acl_options.append('path_dir -i ' ~ acl_data.path_dir) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'path_sub' %}
{%               if acl_data.path_sub|default("") != "" %}
{%                 do acl_options.append('path_sub -i ' ~ acl_data.path_sub) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'cust_hdr_beg' %}
{%               if acl_data.cust_hdr_beg|default("") != "" and acl_data.cust_hdr_beg_name|default("") != "" %}
{%                 do acl_options.append('hdr_beg(' ~ acl_data.cust_hdr_beg_name ~ ') -i ' ~ acl_data.cust_hdr_beg) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'cust_hdr_end' %}
{%               if acl_data.cust_hdr_end|default("") != "" and acl_data.cust_hdr_end_name|default("") %}
{%                 do acl_options.append('hdr_end(' ~ acl_data.cust_hdr_end_name ~ ') -i ' ~ acl_data.cust_hdr_end) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'cust_hdr' %}
{%               if acl_data.cust_hdr|default("") != "" and acl_data.cust_hdr_name|default("") != "" %}
{%                 do acl_options.append('hdr(' ~ acl_data.cust_hdr_name ~ ') -i ' ~ acl_data.cust_hdr) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'cust_hdr_reg' %}
{%               if acl_data.cust_hdr_reg|default("") != "" and acl_data.cust_hdr_reg_name|default("") != "" %}
{%                 do acl_options.append('hdr_reg(' ~ acl_data.cust_hdr_reg_name ~ ') -i ' ~ acl_data.cust_hdr_reg) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'cust_hdr_sub' %}
{%               if acl_data.cust_hdr_sub|default("") != "" and acl_data.cust_hdr_sub_name|default("") != "" %}
{%                 do acl_options.append('hdr_sub(' ~ acl_data.cust_hdr_sub_name ~ ') -i ' ~ acl_data.cust_hdr_sub) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'url_param' %}
{%               if acl_data.url_param_value|default("") != "" and acl_data.url_param|default("") != "" %}
{%                 do acl_options.append('url_param(' ~ acl_data.url_param ~ ') -i ' ~ acl_data.url_param_value) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'ssl_c_verify_code' %}
{%               if acl_data.ssl_c_verify_code|default("") != "" %}
{%                 do acl_options.append('ssl_c_verify ' ~ acl_data.ssl_c_verify_code) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'ssl_c_verify' %}
{%               do acl_options.append('ssl_c_verify 0') %}
{%             elif acl_data.expression == 'ssl_c_ca_commonname' %}
{%               if acl_data.ssl_c_ca_commonname|default("") != "" %}
{%                 do acl_options.append('ssl_c_i_dn(CN) ' ~ acl_data.ssl_c_ca_commonname) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'src' %}
{%               if acl_data.src|default("") != "" %}
{%                 do acl_options.append('src ' ~ acl_data.src) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'src_is_local' %}
{%               do acl_options.append('src_is_local') %}
{%             elif acl_data.expression == 'src_bytes_in_rate' %}
{%               do acl_options.append('src_bytes_in_rate ' ~ acl_data.src_bytes_in_rate_comparison ~ ' ' ~ acl_data.src_bytes_in_rate) %}
{%             elif acl_data.expression == 'src_bytes_out_rate' %}
{%               do acl_options.append('src_bytes_out_rate ' ~ acl_data.src_bytes_out_rate_comparison ~ ' ' ~ acl_data.src_bytes_out_rate) %}
{%             elif acl_data.expression == 'src_conn_cnt' %}
{%               do acl_options.append('src_conn_cnt ' ~ acl_data.src_conn_cnt_comparison ~ ' ' ~ acl_data.src_conn_cnt) %}
{%             elif acl_data.expression == 'src_conn_cur' %}
{%               do acl_options.append('src_conn_cur ' ~ acl_data.src_conn_cur_comparison ~ ' ' ~ acl_data.src_conn_cur) %}
{%             elif acl_data.expression == 'src_conn_rate' %}
{%               do acl_options.append('src_conn_rate ' ~ acl_data.src_conn_rate_comparison ~ ' ' ~ acl_data.src_conn_rate) %}
{%             elif acl_data.expression == 'src_http_err_cnt' %}
{%               do acl_options.append('src_http_err_cnt ' ~ acl_data.src_http_err_cnt_comparison ~ ' ' ~ acl_data.src_http_err_cnt) %}
{%             elif acl_data.expression == 'src_http_err_rate' %}
{%               do acl_options.append('src_http_err_rate ' ~ acl_data.src_http_err_rate_comparison ~ ' ' ~ acl_data.src_http_err_rate) %}
{%             elif acl_data.expression == 'src_http_req_cnt' %}
{%               do acl_options.append('src_http_req_cnt ' ~ acl_data.src_http_req_cnt_comparison ~ ' ' ~ acl_data.src_http_req_cnt) %}
{%             elif acl_data.expression == 'src_http_req_rate' %}
{%               do acl_options.append('src_http_req_rate ' ~ acl_data.src_http_req_rate_comparison ~ ' ' ~ acl_data.src_http_req_rate) %}
{%             elif acl_data.expression == 'src_kbytes_in' %}
{%               do acl_options.append('src_kbytes_in ' ~ acl_data.src_kbytes_in_comparison ~ ' ' ~ acl_data.src_kbytes_in) %}
{%             elif acl_data.expression == 'src_kbytes_out' %}
{%               do acl_options.append('src_kbytes_out ' ~ acl_data.src_kbytes_out_comparison ~ ' ' ~ acl_data.src_kbytes_out) %}
{%             elif acl_data.expression == 'src_port' %}
{%               do acl_options.append('src_port ' ~ acl_data.src_port_comparison ~ ' ' ~ acl_data.src_port) %}
{%             elif acl_data.expression == 'src_sess_cnt' %}
{%               do acl_options.append('src_sess_cnt' ~ acl_data.src_sess_cnt_comparison ~ ' ' ~ acl_data.src_sess_cnt) %}
{%             elif acl_data.expression == 'src_sess_rate' %}
{%               do acl_options.append('src_sess_rate ' ~ acl_data.src_sess_rate_comparison ~ ' ' ~ acl_data.src_sess_rate) %}
{%             elif acl_data.expression == 'nbsrv' %}
{%               do acl_options.append('') %}
{%               if acl_data.nbsrv|default("") != "" %}
{%                 if acl_data.nbsrv_backend|default("") != "" %}
{%                   set nbsrv_backend_data = helpers.getUUID(acl_data.nbsrv_backend) %}
{%                   do acl_options.append('nbsrv(' ~ nbsrv_backend_data.name ~ ') ge ' ~ acl_data.nbsrv) %}
{%                 else %}
{%                   do acl_options.append('nbsrv ge ' ~ acl_data.nbsrv) %}
{%                 endif %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'traffic_is_http' %}
{%               do acl_options.append('req.proto_http') %}
{%             elif acl_data.expression == 'traffic_is_ssl' %}
{%               do acl_options.append('req.ssl_ver gt 0') %}
{%             elif acl_data.expression == 'ssl_fc' %}
{%               do acl_options.append('ssl_fc') %}
{%             elif acl_data.expression == 'ssl_fc_sni' %}
{%               if acl_data.ssl_fc_sni|default("") != "" %}
{%                 do acl_options.append('ssl_fc_sni ' ~ acl_data.ssl_fc_sni) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'ssl_sni' %}
{%               if acl_data.ssl_sni|default("") != "" %}
{%                 do acl_options.append('req.ssl_sni -i ' ~ acl_data.ssl_sni) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'ssl_sni_sub' %}
{%               if acl_data.ssl_sni_sub|default("") != "" %}
{%                 do acl_options.append('req.ssl_sni -m sub -i ' ~ acl_data.ssl_sni_sub) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'ssl_sni_beg' %}
{%               if acl_data.ssl_sni_beg|default("") != "" %}
{%                 do acl_options.append('req.ssl_sni -m beg -i ' ~ acl_data.ssl_sni_beg) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'ssl_sni_end' %}
{%               if acl_data.ssl_sni_end|default("") != "" %}
{%                 do acl_options.append('req.ssl_sni -m end -i ' ~ acl_data.ssl_sni_end) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'ssl_sni_reg' %}
{%               if acl_data.ssl_sni_reg|default("") != "" %}
{%                 do acl_options.append('req.ssl_sni -m reg -i ' ~ acl_data.ssl_sni_reg) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             elif acl_data.expression == 'custom_acl' %}
{%               if acl_data.custom_acl|default("") != "" %}
{%                 do acl_options.append(acl_data.custom_acl) %}
{%               else %}
{%                 set acl_enabled = '0' %}
    # ERROR: missing parameters
{%               endif %}
{%             else %}
{%               set acl_enabled = '0' %}
    # ERROR: unsupported ACL expression
{%             endif %}
{%           endif %}
{#           # check if ACL is valid #}
{%           if acl_enabled == '1' %}
    # ACL: {{acl_data.name}}
    acl acl_{{acl_data.id}} {{acl_options|join(' ')}}
{%           else %}
{%             set acl_errors = acl_errors + 1 %}
    # ACL INVALID: {{acl_data.name}} ({{acl}})
{%           endif %}
{%         endfor %}
{%       endif %}
{#       # NOTE: We're ignoring actions if any ACL is erroneous, #}
{#       #       because doing otherwise would lead to unpredictable behaviour. #}
{%       if acl_errors|int == 0 %}
{%         set action_enabled = '1' %}
{%         set action_options = [] %}
{%         if action_data.type == 'use_backend' %}
{%           if action_data.use_backend|default("") != "" %}
{%             set acl_backend_data = helpers.getUUID(action_data.use_backend) %}
{%             do action_options.append('use_backend ' ~ acl_backend_data.name) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'use_server' %}
{%           if action_data.use_server|default("") != "" %}
{%             set server_data = helpers.getUUID(action_data.use_server) %}
{%             do action_options.append('use-server ' ~ server_data.name) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'map_use_backend' %}
{#           # First get the map file path #}
{%           if action_data.map_use_backend_file|default("") != "" %}
{%             set mapfile_data = helpers.getUUID(action_data.map_use_backend_file) %}
{%             set mapfile_path = '/tmp/haproxy/mapfiles/' ~ mapfile_data.id ~ '.txt' %}
{#             # Check if a default backend is specified #}
{%             if action_data.map_use_backend_default|default("") != "" %}
{%               set defaultbackend_data = helpers.getUUID(action_data.map_use_backend_default) %}
{%               set defaultbackend_option = ',' ~ defaultbackend_data.name %}
{%             else %}
{%               set defaultbackend_option = '' %}
{%             endif %}
{#             # Finally add map file to config #}
{%             do action_options.append('use_backend %[req.hdr(host),lower,map_dom(' ~ mapfile_path ~ defaultbackend_option ~ ')]') %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'http-request_allow' %}
{%           do action_options.append('http-request allow') %}
{%         elif action_data.type == 'http-request_deny' %}
{%           do action_options.append('http-request deny') %}
{%         elif action_data.type == 'http-request_tarpit' %}
{%           do action_options.append('http-request tarpit') %}
{%         elif action_data.type == 'http-request_auth' %}
{%           if action_data.http_request_auth|default("") != "" %}
{%             do action_options.append('http-request auth realm ' ~ action_data.http_request_auth) %}
{%           else %}
{%             do action_options.append('http-request auth') %}
{%           endif %}
{%         elif action_data.type == 'http-request_redirect' %}
{%           if action_data.http_request_redirect|default("") != "" %}
{%             do action_options.append('http-request redirect ' ~ action_data.http_request_redirect) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'http-request_lua' %}
{%           if action_data.http_request_lua|default("") != "" %}
{%             do action_options.append('http-request lua.' ~ action_data.http_request_lua) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'http-request_use-service' %}
{%           if action_data.http_request_use_service|default("") != "" %}
{%             do action_options.append('http-request use-service lua.' ~ action_data.http_request_use_service) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'http-request_add-header' %}
{%           if action_data.http_request_add_header_name|default("") != "" and action_data.http_request_add_header_content|default("") != "" %}
{%             do action_options.append('http-request add-header ' ~ action_data.http_request_add_header_name ~ ' ' ~ action_data.http_request_add_header_content) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'http-request_set-header' %}
{%           if action_data.http_request_set_header_name|default("") != "" and action_data.http_request_set_header_content|default("") != "" %}
{%             do action_options.append('http-request set-header ' ~ action_data.http_request_set_header_name ~ ' ' ~ action_data.http_request_set_header_content) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'http-request_del-header' %}
{%           if action_data.http_request_del_header_name|default("") != "" %}
{%             do action_options.append('http-request del-header ' ~ action_data.http_request_del_header_name) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'http-request_replace-header' %}
{%           if action_data.http_request_replace_header_name|default("") != "" and action_data.http_request_replace_header_regex|default("") != "" %}
{%             do action_options.append('http-request replace-header ' ~ action_data.http_request_replace_header_name ~ ' ' ~ action_data.http_request_replace_header_regex) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'http-request_replace-value' %}
{%           if action_data.http_request_replace_value_name|default("") != "" and action_data.http_request_replace_value_regex|default("") != "" %}
{%             do action_options.append('http-request replace-value ' ~ action_data.http_request_replace_value_name ~ ' ' ~ action_data.http_request_replace_value_regex) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'http-request_set-path' %}
{%           if action_data.http_request_set_path|default("") != "" %}
{%             do action_options.append('http-request set-path ' ~ action_data.http_request_set_path) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'http-request_set-var' %}
{%           if action_data.http_request_set_var_scope|default("") != "" and action_data.http_request_set_var_name|default("") != "" and action_data.http_request_set_var_expr|default("") != "" %}
{%             do action_options.append('http-request set-var(' ~ action_data.http_request_set_var_scope ~ '.' ~ action_data.http_request_set_var_name ~ ') ' ~ action_data.http_request_set_var_expr) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'http-response_allow' %}
{%           do action_options.append('http-response allow') %}
{%         elif action_data.type == 'http-response_deny' %}
{%           do action_options.append('http-response deny') %}
{%         elif action_data.type == 'http-response_lua' %}
{%           if action_data.http_response_lua|default("") != "" %}
{%             do action_options.append('http-response lua.' ~ action_data.http_response_lua) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'http-response_add-header' %}
{%           if action_data.http_response_add_header_name|default("") != "" and action_data.http_response_add_header_content|default("") != "" %}
{%             do action_options.append('http-response add-header ' ~ action_data.http_response_add_header_name ~ ' ' ~ action_data.http_response_add_header_content) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'http-response_set-header' %}
{%           if action_data.http_response_set_header_name|default("") != "" and action_data.http_response_set_header_content|default("") != "" %}
{%             do action_options.append('http-response set-header ' ~ action_data.http_response_set_header_name ~ ' ' ~ action_data.http_response_set_header_content) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'http-response_del-header' %}
{%           if action_data.http_response_del_header_name|default("") != "" %}
{%             do action_options.append('http-response del-header ' ~ action_data.http_response_del_header_name) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'http-response_replace-header' %}
{%           if action_data.http_response_replace_header_name|default("") != "" and action_data.http_response_replace_header_regex|default("") != "" %}
{%             do action_options.append('http-response replace-header ' ~ action_data.http_response_replace_header_name ~ ' ' ~ action_data.http_response_replace_header_regex) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'http-response_replace-value' %}
{%           if action_data.http_response_replace_value_name|default("") != "" and action_data.http_response_replace_value_regex|default("") != "" %}
{%             do action_options.append('http-response replace-value ' ~ action_data.http_response_replace_value_name ~ ' ' ~ action_data.http_response_replace_value_regex) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'http-response_set-status' %}
{%           if action_data.http_response_set_status_code|default("") != "" %}
{%             if action_data.http_response_set_status_reason|default("") != "" %}
{%               set status_reason = ' reason "' ~ action_data.http_response_set_status_reason ~ '"' %}
{%             else %}
{%               set status_reason = '' %}
{%             endif %}
{%             do action_options.append('http-response set-status ' ~ action_data.http_response_set_status_code ~ status_reason) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'http-response_set-var' %}
{%           if action_data.http_response_set_var_scope|default("") != "" and action_data.http_response_set_var_name|default("") != "" and action_data.http_response_set_var_expr|default("") != "" %}
{%             do action_options.append('http-response set-var(' ~ action_data.http_response_set_var_scope ~ '.' ~ action_data.http_response_set_var_name ~ ') ' ~ action_data.http_response_set_var_expr) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'tcp-request_connection_accept' %}
{%           do action_options.append('tcp-request connection accept') %}
{%         elif action_data.type == 'tcp-request_connection_reject' %}
{%           do action_options.append('tcp-request connection reject') %}
{%         elif action_data.type == 'tcp-request_content_accept' %}
{%           do action_options.append('tcp-request content accept') %}
{%         elif action_data.type == 'tcp-request_content_reject' %}
{%           do action_options.append('tcp-request content reject') %}
{%         elif action_data.type == 'tcp-request_content_lua' %}
{%           if action_data.tcp_request_content_lua|default("") != "" %}
{%             do action_options.append('tcp-request content lua.' ~ action_data.tcp_request_content_lua) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'tcp-request_content_use-service' %}
{%           if action_data.tcp_request_content_use_service|default("") != "" %}
{%             do action_options.append('tcp-request content use-service lua.' ~ action_data.tcp_request_content_use_service) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'tcp-request_inspect-delay' %}
{%           if action_data.tcp_request_inspect_delay|default("") != "" %}
{%             do action_options.append('tcp-request inspect-delay ' ~ action_data.tcp_request_inspect_delay) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'tcp-response_content_accept' %}
{%           do action_options.append('tcp-response content accept') %}
{%         elif action_data.type == 'tcp-response_content_close' %}
{%           do action_options.append('tcp-response content close') %}
{%         elif action_data.type == 'tcp-response_content_reject' %}
{%           do action_options.append('tcp-response content reject') %}
{%         elif action_data.type == 'tcp-response_content_lua' %}
{%           if action_data.tcp_response_content_lua|default("") != "" %}
{%             do action_options.append('tcp-response content lua.' ~ action_data.tcp_response_content_lua) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'tcp-response_inspect-delay' %}
{%           if action_data.tcp_response_inspect_delay|default("") != "" %}
{%             do action_options.append('tcp-response inspect-delay ' ~ action_data.tcp_response_inspect_delay) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         elif action_data.type == 'custom' %}
{%           if action_data.custom|default("") != "" %}
{%             do action_options.append(action_data.custom) %}
{%           else %}
{%             set action_enabled = '0' %}
    # ERROR: missing parameters
{%           endif %}
{%         else %}
{%           set action_enabled = '0' %}
    # ERROR: unsupported action type
{%         endif %}
{#         # check if action is valid #}
{%         if action_enabled == '1' %}
{%           if action_data.operator == 'or' %}
{%             set join_operator = ' || ' %}
{%           else %}
{%             set join_operator = ' ' %}
{%           endif %}
{#           # check if action depends on ACLs #}
{%           set comment_lines = ['# ACTION: ' + action_data.name] %}
{%           if action_acls|length > 0 %}
{%             set acl_line = [action_data.testType, action_acls|join(join_operator)]|join(' ') %}
{%           else %}
{%             set acl_line = '' %}
{%             set comment_lines = comment_lines + ['    # NOTE: actions with no ACLs/conditions will always match'] %}
{%           endif %}
{%           if action_options|length > 0 %}
{%             do global_action_options.append(comment_lines|join('\n')) %}
{%             do global_action_options.append(([action_options|join(' '), acl_line]|join(' '))) %}
{%           endif %}
{%         else %}
    # ACTION INVALID: {{action_data.name}}
{%         endif %}
{%       else %}
    # ACTION INVALID: {{action_data.name}}
    # ACL ERROR COUNT: {{acl_errors}}
{%       endif %}
{%     endfor %}

{%     if global_action_options|length > 0 %}
    {{global_action_options|join('\n' + '    ')}}
{%     endif %}
{%   else %}
# ERROR: AclsAndActions called with empty data
{%   endif %}
{%- endmacro %}

{# Macro expects a backend or frontend object. #}
{% macro StickTableConfig(proxy, backend=False) -%}
{%   if proxy is defined %}
{#     # check if stickiness is disabled (set to "None") #}
{%     if proxy.stickiness_pattern|default("") != "" %}
    # stickiness
{#       # check if additional data types are configured #}
{%       if proxy.stickiness_dataTypes|default("") != "" %}
{%         set stickiness_datatypes = [] %}
{%         for datatype in proxy.stickiness_dataTypes.split(",") %}
{#           # add time period to all types where this is required #}
{%           if datatype == 'conn_rate' %}
{%             do stickiness_datatypes.append(datatype ~ '(' ~ proxy.stickiness_connRatePeriod ~ ')') %}
{%           elif datatype == 'sess_rate' %}
{%             do stickiness_datatypes.append(datatype ~ '(' ~ proxy.stickiness_sessRatePeriod ~ ')') %}
{%           elif datatype == 'http_req_rate' %}
{%             do stickiness_datatypes.append(datatype ~ '(' ~ proxy.stickiness_httpReqRatePeriod ~ ')') %}
{%           elif datatype == 'http_err_rate' %}
{%             do stickiness_datatypes.append(datatype ~ '(' ~ proxy.stickiness_httpErrRatePeriod ~ ')') %}
{%           elif datatype == 'bytes_in_rate' %}
{%             do stickiness_datatypes.append(datatype ~ '(' ~ proxy.stickiness_bytesInRatePeriod ~ ')') %}
{%           elif datatype == 'bytes_out_rate' %}
{%             do stickiness_datatypes.append(datatype ~ '(' ~ proxy.stickiness_bytesOutRatePeriod ~ ')') %}
{%           else %}
{%             do stickiness_datatypes.append(datatype) %}
{%           endif %}
{%         endfor %}
{%         set stickiness_store = 'store ' ~ stickiness_datatypes|join(',') %}
{%       endif %}
{#       # check stick-table type #}
{%       if proxy.stickiness_pattern == "sourceipv4" or proxy.stickiness_pattern == "ipv4" %}
{%         set table_type = 'ip' %}
{%       elif proxy.stickiness_pattern == "sourceipv6" or proxy.stickiness_pattern == "ipv6" %}
{%         set table_type = 'ipv6' %}
{%       elif proxy.stickiness_pattern == "cookievalue" or proxy.stickiness_pattern == "string" %}
{%         set table_type = 'string' %}
{%         set add_length = True %}
{%       elif proxy.stickiness_pattern == "rdpcookie" or proxy.stickiness_pattern == "binary" %}
{%         set table_type = 'binary' %}
{%         set add_length = True %}
{%       elif proxy.stickiness_pattern == "integer" %}
{%         set table_type = 'integer' %}
{%       endif %}
{#       # check data length #}
{%       if add_length is defined %}
{%         if proxy.stickiness_cookielength is defined %}
{%           set data_length = proxy.stickiness_cookielength %}
{%         elif proxy.stickiness_length is defined %}
{%           set data_length = proxy.stickiness_length %}
{%         else %}
{%           set data_length = '32' %}
{%         endif %}
{%       endif %}
{#       # add stick-table #}
{%       if table_type is defined %}
    stick-table type {{table_type}} {%if add_length is defined %}len {{data_length}} {% endif %}size {{proxy.stickiness_size}} expire {{proxy.stickiness_expire}} {{stickiness_store}} {% if peers_enabled is defined %}{{'peers ' ~ peers_name}}{% endif %}

{%       endif %}
{#       # sticky counters (frontends only) #}
{%-      if backend == False -%}
{%-        if proxy.stickiness_counter|default("0") == "1" and proxy.stickiness_counter_key != '' %}
    tcp-request connection track-sc0 {{proxy.stickiness_counter_key}}
{%-        endif -%}
{%-      endif -%}
{%     endif %}
{#     # persistence (backends only) #}
{%-    if backend == True -%}
{%-      if proxy.persistence|default("") == "cookie" %}
{#         # cookie-based persistence #}
{%-        if proxy.persistence_cookiemode|default("") == "piggyback" %}
    cookie {{proxy.persistence_cookiename}} prefix
{%-        elif proxy.persistence_cookiemode|default("") == "new" %}
    cookie {{proxy.persistence_cookiename}} insert indirect nocache
{%-        endif -%}
{%       elif proxy.persistence|default("") == "sticktable" %}
{#         # stick-table persistence #}
{%-        if proxy.stickiness_pattern|default("") == "cookievalue" %}
    stick store-response res.cook({{proxy.stickiness_cookiename}})
    stick on req.cook({{proxy.stickiness_cookiename}})
{%-        elif proxy.stickiness_pattern|default("") == "rdpcookie" %}
    stick on req.rdp_cookie(mstshash)
{%-        elif proxy.stickiness_pattern|default("") != '' %}
    stick on src
{%-        endif -%}
{%-      endif -%}
{%-    endif -%}
{%   else %}
# ERROR: StickTableConfig called with empty data
{%   endif %}
{%- endmacro -%}

{# Macro expects a backend or frontend object. #}
{% macro BasicAuthConfig(proxy) -%}
{%   if proxy is defined %}
{#     # basic auth expects a HTTP frontend/backend #}
{%     if (proxy.mode == 'http' and proxy.basicAuthEnabled == '1') %}
{#       # use the frontend/backend ID to identify the autogenerated userlist #}
    acl auth_ok http_auth(list_{{proxy.id}})
    http-request auth if !auth_ok
{%     endif %}
{%   else %}
# ERROR: BasicAuthConfig called with empty data
{%   endif %}
{%- endmacro -%}

{# Macro expects a backend or frontend object. #}
{% macro UserlistConfig(proxy) -%}
{%   if proxy is defined %}
{#     # basic auth expects a HTTP frontend/backend #}
{%     if (proxy.mode == 'http' and proxy.basicAuthEnabled == '1') %}
{#     # use the frontend/backend ID to identify the autogenerated userlist #}
    acl auth_ok http_auth({{proxy.id}})
    http-request auth if !auth_ok
{%     endif %}
{%   else %}
# ERROR: BasicAuthConfig called with empty data
{%   endif %}
{%- endmacro -%}

{# Macro expects a CSV list of users and validates them. #}
{% macro UserlistAddUsers(linkedUserData,linkedGroupData) -%}
{#   # remember all users to avoid duplicate entries #}
{%   set users_seen = [] %}
{#   # process all users #}
{%   if linkedUserData is defined %}
{%     for user in linkedUserData.split(",") %}
{%       set user_data = helpers.getUUID(user) %}
{#       # check if this user can (still) be found in configuration #}
{%       if user_data == {} %}
# ERROR: user data not found ({{user}})
{%       else %}
{%         if user_data.name in users_seen %}
    # WARNING: skipping duplicate username ({{user_data.name}})
{%         else %}
{%           do users_seen.append(user_data.name) %}
{#           # check if using an encrypted password #}
{%           if user_data.password|default("")|truncate(1, False, '', 0) == '$' %}
{%             set user_pwsec = 'password' %}
{%           else %}
{%             set user_pwsec = 'insecure-password' %}
{%           endif %}
    user {{user_data.name}} {{user_pwsec}} {{user_data.password}}
{%         endif %}
{%       endif %}
{%     endfor %}
{%   else %}
    # NOTE: UserlistAddUsers called with empty user data
{%   endif %}
{#   # process all group members #}
{%   if linkedGroupData is defined %}
{%     for group in linkedGroupData.split(",") %}
{%       set group_data = helpers.getUUID(group) %}
{#       # check if this group can (still) be found in configuration #}
{%       if group_data == {} %}
    # WARNING: group data not found ({{group}})
{%       else %}
{#         # extract user list from group object #}
{%         for user in group_data.members.split(",") %}
{%           set user_data = helpers.getUUID(user) %}
{%           if user_data.name in users_seen %}
    # WARNING: skipping duplicate username ({{user_data.name}})
{%           else %}
{%             do users_seen.append(user_data.name) %}
{#             # check if using an encrypted password #}
{%             if user_data.password|default("")|truncate(1, False, '', 0) == '$' %}
{%               set user_pwsec = 'password' %}
{%             else %}
{%               set user_pwsec = 'insecure-password' %}
{%             endif %}
    user {{user_data.name}} {{user_pwsec}} {{user_data.password}}
{%           endif %}
{%         endfor %}
{%       endif %}
{%     endfor %}
{%   else %}
    # NOTE: UserlistAddUsers called with empty group data
{%   endif %}
{%- endmacro %}

{# Macro expects a backend/frontend (type 1) or group object (type 2). #}
{% macro AddUserlist(type,object) -%}
{%   if (type == '1' and object is defined) %}
{#     # frontend/backend object #}
{%     if (object.enabled|default("") == '1' and object.mode|default("") == 'http' and object.basicAuthEnabled|default("") == '1') %}
{#       # call macro to generate list of unique users #}
{%       set userlist_result = UserlistAddUsers(object.basicAuthUsers,object.basicAuthGroups) %}
{#       # check result, skip when empty #}
{%       if (userlist_result is defined and userlist_result|default("") != "" )%}
userlist list_{{object.id}}
    # Origin: {{object.name}}
{{userlist_result}}
{%       endif %}
{%     endif %}
{%   elif (type == '2' and object is defined) %}
{#     # group object #}
{%     if (object.enabled|default("") == '1' and object.add_userlist|default("") == '1') %}
{#       # call macro to generate list of unique users #}
{%       set userlist_result = UserlistAddUsers(object.members) %}
{#       # check result, skip when empty #}
{%       if (userlist_result is defined and userlist_result|default("") != "" ) %}
userlist {{object.name | regex_replace ("[^A-Za-z0-9]","")}}
{{userlist_result}}
{%       endif %}
{%     endif %}
{%   endif %}
{%- endmacro -%}

{% if not (helpers.exists('OPNsense.HAProxy.general') and OPNsense.HAProxy.general.enabled|default("0") == "1") %}
#
# NOTE: HAProxy is currently DISABLED
#
{% endif %}

{#- ############################### -#}
{#-             GLOBAL              -#}
{#- ############################### -#}

global
{#  # NOTE: Running as root could be a security issue, but is required for some features. #}
{% if OPNsense.HAProxy.general.tuning.root != "1" %}
    uid                         80
{% endif %}
    gid                         80
    chroot                      /var/haproxy
    daemon
{% if helpers.exists('OPNsense.HAProxy.general.seamlessReload') and OPNsense.HAProxy.general.seamlessReload|default("0") == "1" %}
    stats                       socket /var/run/haproxy.socket group proxy mode 775 level admin expose-fd listeners
{% else %}
    stats                       socket /var/run/haproxy.socket group proxy mode 775 level admin
{% endif %}
    nbproc                      {{OPNsense.HAProxy.general.tuning.nbproc}}
{% if OPNsense.HAProxy.general.tuning.nbthread|default('') != '' %}
    nbthread                    {{OPNsense.HAProxy.general.tuning.nbthread}}
{% endif %}
{% if helpers.exists('OPNsense.HAProxy.cpus.cpu') %}
{%   for cpu_map in helpers.toList('OPNsense.HAProxy.cpus.cpu') %}
{%     if cpu_map.enabled == '1' %}
    cpu-map                     {{cpu_map.process_id|replace('x', '')}}/{{cpu_map.thread_id|replace('x', '')}} {{cpu_map.cpu_id|replace('x', '')|replace(',', ' ')}}
{%     endif %}
{%   endfor %}
{% endif %}
{% if helpers.exists('OPNsense.HAProxy.general.tuning.maxConnections') %}
    maxconn                     {{OPNsense.HAProxy.general.tuning.maxConnections}}
{% endif %}
{% if helpers.exists('OPNsense.HAProxy.general.tuning.maxDHSize') %}
    tune.ssl.default-dh-param   {{OPNsense.HAProxy.general.tuning.maxDHSize}}
{% endif %}
{% if helpers.exists('OPNsense.HAProxy.general.tuning.sslServerVerify') %}
{%     if OPNsense.HAProxy.general.tuning.sslServerVerify|default("") != 'ignore' %}
    ssl-server-verify           {{OPNsense.HAProxy.general.tuning.sslServerVerify}}
{%     endif %}
{% endif %}
{% if OPNsense.HAProxy.general.tuning.spreadChecks|default("") != "" %}
    spread-checks               {{OPNsense.HAProxy.general.tuning.spreadChecks}}
{% endif %}
{% if OPNsense.HAProxy.general.tuning.bogusProxyEnabled|default("") == '1' %}
    pp2-never-send-local
{% endif %}
{% if OPNsense.HAProxy.general.tuning.checkBufferSize|default("") != "" %}
    tune.chksize                {{OPNsense.HAProxy.general.tuning.checkBufferSize}}
{% endif %}
{% if OPNsense.HAProxy.general.tuning.bufferSize|default("") != "" %}
    tune.bufsize                {{OPNsense.HAProxy.general.tuning.bufferSize}}
{% endif %}
{% if OPNsense.HAProxy.general.tuning.luaMaxMem|default("") != "" %}
    tune.lua.maxmem             {{OPNsense.HAProxy.general.tuning.luaMaxMem}}
{% endif %}
{# # logging configuration #}
{% set logging = [] %}
{% if OPNsense.HAProxy.general.logging.host != '127.0.0.1' %}
{%   do logging.append(OPNsense.HAProxy.general.logging.host) %}
{% else %}
{%   do logging.append('/var/run/log') %}
{% endif %}
{% do logging.append('len ' ~ OPNsense.HAProxy.general.logging.length) if OPNsense.HAProxy.general.logging.length|default("") != "" %}
{% do logging.append(OPNsense.HAProxy.general.logging.facility) %}
{% do logging.append(OPNsense.HAProxy.general.logging.level) if OPNsense.HAProxy.general.logging.level|default("") != "" %}
    log {{logging|join(' ')}}
{% if helpers.exists('OPNsense.HAProxy.luas.lua') %}
    # lua scripts
{%   for lua in helpers.toList('OPNsense.HAProxy.luas.lua') %}
{%     if lua.enabled == '1' %}
    # lua script: {{lua.name}}
    lua-load /tmp/haproxy/lua/{{lua.id}}.lua
{%     endif %}
{%   endfor %}
{% endif %}
{# # ssl default settings #}
{% if OPNsense.HAProxy.general.tuning.ssl_defaultsEnabled|default("") == '1' %}
{%   set bindopts = [] %}
{%   if OPNsense.HAProxy.general.tuning.ssl_bindOptions|default("") != "" %}
{%     for bindopt in OPNsense.HAProxy.general.tuning.ssl_bindOptions.split(",") %}
{%       do bindopts.append(bindopt) %}
{%     endfor %}
{%   endif %}
{%   if OPNsense.HAProxy.general.tuning.ssl_minVersion|default("") != "" %}
{%     do bindopts.append('ssl-min-ver ' ~ OPNsense.HAProxy.general.tuning.ssl_minVersion) %}
{%   endif %}
{%   if OPNsense.HAProxy.general.tuning.ssl_maxVersion|default("") != "" %}
{%     do bindopts.append('ssl-max-ver ' ~ OPNsense.HAProxy.general.tuning.ssl_maxVersion) %}
{%   endif %}
{%   if (bindopts is defined and bindopts|default("") != "" )%}
    ssl-default-bind-options {{ bindopts|join(' ') }}
{%   endif %}
{%   if OPNsense.HAProxy.general.tuning.ssl_cipherList|default("") != "" %}
    ssl-default-bind-ciphers {{ OPNsense.HAProxy.general.tuning.ssl_cipherList }}
{%   endif %}
{%   if OPNsense.HAProxy.general.tuning.ssl_cipherSuites|default("") != "" %}
{%     if helpers.exists('system.firmware.flavour') and not(helpers.empty('system.firmware.flavour')) and system.firmware.flavour|default('') == 'libressl' %}
    # WARNING: ssl-default-bind-ciphersuites cannot be used with flavour {{ system.firmware.flavour}}.
{%     else %}
    ssl-default-bind-ciphersuites {{ OPNsense.HAProxy.general.tuning.ssl_cipherSuites }}
{%     endif %}
{%   endif %}
{% endif %}
{# # pass-through options #}
{% if OPNsense.HAProxy.general.tuning.customOptions|default("") != "" %}
    # WARNING: pass through options below this line
{%   for customOpt in OPNsense.HAProxy.general.tuning.customOptions.split("\n") %}
    {{customOpt}}
{%   endfor %}
{%- endif -%}

{# ############################### #}
{#             CACHE               #}
{# ############################### #}

{%- if helpers.exists('OPNsense.HAProxy.general.cache') and OPNsense.HAProxy.general.cache.enabled|default("") == "1" %}
cache opnsense-haproxy-cache
{%   if OPNsense.HAProxy.general.cache.totalMaxSize|default("") != "" %}
    total-max-size {{OPNsense.HAProxy.general.cache.totalMaxSize}}
{%   endif %}
{%   if OPNsense.HAProxy.general.cache.maxAge|default("") != "" %}
    max-age {{OPNsense.HAProxy.general.cache.maxAge}}
{%   endif %}
{%   if OPNsense.HAProxy.general.cache.maxObjectSize|default("") != "" %}
    max-object-size {{OPNsense.HAProxy.general.cache.maxObjectSize}}
{%   endif %}
{%- endif -%}

{# ############################### #}
{#             DEFAULTS            #}
{# ############################### #}

{% if helpers.exists('OPNsense.HAProxy.general.defaults') %}
defaults
    log     global
{%   if OPNsense.HAProxy.general.defaults.redispatch|default("") != "" %}
    option redispatch {{OPNsense.HAProxy.general.defaults.redispatch|replace("x", "")}}
{%   endif %}
{%   if OPNsense.HAProxy.general.defaults.maxConnections|default("") != "" %}
    maxconn {{OPNsense.HAProxy.general.defaults.maxConnections}}
{%   endif %}
{%   if OPNsense.HAProxy.general.defaults.timeoutClient|default("") != "" %}
    timeout client {{OPNsense.HAProxy.general.defaults.timeoutClient}}
{%   endif %}
{%   if OPNsense.HAProxy.general.defaults.timeoutConnect|default("") != "" %}
    timeout connect {{OPNsense.HAProxy.general.defaults.timeoutConnect}}
{%   endif %}
{%   if OPNsense.HAProxy.general.defaults.timeoutCheck|default("") != "" %}
    timeout check {{OPNsense.HAProxy.general.defaults.timeoutCheck}}
{%   endif %}
{%   if OPNsense.HAProxy.general.defaults.timeoutServer|default("") != "" %}
    timeout server {{OPNsense.HAProxy.general.defaults.timeoutServer}}
{%   endif %}
{%   if OPNsense.HAProxy.general.defaults.retries|default("") != "" %}
    retries {{OPNsense.HAProxy.general.defaults.retries}}
{%   endif %}
{%   if OPNsense.HAProxy.general.defaults.init_addr|default("") != "" %}
    default-server init-addr {{OPNsense.HAProxy.general.defaults.init_addr}}
{%   endif %}
{%   if OPNsense.HAProxy.general.defaults.customOptions|default("") != "" %}
    # WARNING: pass through options below this line
{%     for customOpt in OPNsense.HAProxy.general.defaults.customOptions.split("\n") %}
    {{customOpt}}
{%     endfor %}
{%   endif %}
{%- endif -%}

{# ############################### #}
{#             USERLISTS           #}
{# ############################### #}
{# # NOTE: Yes, this config block is redundant and duplicates entries (on purpose). #}
{# #       This makes it much easier for a user to compose this from the GUI. #}

# autogenerated entries for ACLs
{% if helpers.exists('OPNsense.HAProxy.acls') %}
{%   for acl in helpers.toList('OPNsense.HAProxy.acls.acl') %}
{%     if (acl.allowedUsers|default("") != "") or (acl.allowedGroups|default("") != "") %}
{#       # call macro to generate list of unique users #}
{%       set userlist_result = UserlistAddUsers(acl.allowedUsers, acl.allowedGroups) %}
{#       # check result, skip when empty #}
{%       if (userlist_result is defined and userlist_result|default("") != "" )%}
userlist acl_{{acl.id}}
    # Origin: {{acl.name}}
{{userlist_result}}
{%       endif %}
{%     endif %}
{%   endfor %}
{% endif %}

{% if helpers.exists('OPNsense.HAProxy.groups') %}
# userlists generated from groups
{%   for group in helpers.toList('OPNsense.HAProxy.groups.group') %}
{#     # call macro to generate userlist #}
{{     AddUserlist('2',group) -}}
{%   endfor %}
{% endif %}

# autogenerated entries for config in backends/frontends
{% if helpers.exists('OPNsense.HAProxy.frontends') %}
{%   for frontend in helpers.toList('OPNsense.HAProxy.frontends.frontend') %}
{#     # call macro to generate userlist #}
{{     AddUserlist('1',frontend) -}}
{%   endfor %}
{% endif %}
{% if helpers.exists('OPNsense.HAProxy.backends') %}
{%   for backend in helpers.toList('OPNsense.HAProxy.backends.backend') %}
{#     # call macro to generate userlist #}
{{     AddUserlist('1',backend) -}}
{%   endfor %}
{% endif %}

# autogenerated entries for stats
{% if OPNsense.HAProxy.general.stats.remoteEnabled|default("") == "1" %}
{%   if (OPNsense.HAProxy.general.stats.allowedUsers|default("") != "") or (OPNsense.HAProxy.general.stats.allowedGroups|default("") != "") %}
{#     # call macro to generate list of unique users #}
{%     set userlist_result = UserlistAddUsers(OPNsense.HAProxy.general.stats.allowedUsers, OPNsense.HAProxy.general.stats.allowedGroups) %}
{#     # check result, skip when empty #}
{%     if (userlist_result is defined and userlist_result|default("") != "" )%}
userlist stats_auth
{{userlist_result}}
{%     endif %}
{%   endif %}
{% endif %}

{# ############################### #}
{#             RESOLVERS           #}
{# ############################### #}

{% if helpers.exists('OPNsense.HAProxy.resolvers') %}
{%   for resolver in helpers.toList('OPNsense.HAProxy.resolvers.resolver') %}
{%     if resolver.enabled == '1' %}
# Resolver: {{resolver.name}}
resolvers {{resolver.id}}
{%       if resolver.nameservers|default("") != "" %}
{%         for nameserver in resolver.nameservers.split(",") %}
    nameserver {{nameserver}} {{nameserver}}
{%         endfor %}
{%       endif %}
{%       if resolver.parse_resolv_conf|default("") == "1" %}
    parse-resolv-conf
{%       endif %}
{%       if resolver.resolve_retries|default("") != "" %}
    resolve_retries {{resolver.resolve_retries}}
{%       endif %}
{%       if resolver.timeout_resolve|default("") != "" %}
    timeout resolve {{resolver.timeout_resolve}}
{%       endif %}
{%       if resolver.timeout_retry|default("") != "" %}
    timeout retry {{resolver.timeout_retry}}
{%       endif %}

{%     else %}
# Resolver (DISABLED): {{resolver.name}}

{%     endif %}
{%   endfor %}
{%- endif -%}

{# ############################### #}
{#              MAILERS            #}
{# ############################### #}

{% if helpers.exists('OPNsense.HAProxy.mailers') %}
{%   for mailer in helpers.toList('OPNsense.HAProxy.mailers.mailer') %}
{%     if mailer.enabled == '1' %}
{#       # check if mailer is configured in a backend #}
{%       set ns = namespace(mailer_found=false) %}
{%       if helpers.exists('OPNsense.HAProxy.backends') %}
{%         for backend in helpers.toList('OPNsense.HAProxy.backends.backend') %}
{#           # backend must be enabled #}
{%           if backend.enabled == '1' and backend.linkedMailer|default('') == mailer['@uuid'] %}
{%             set ns.mailer_found = True %}
{%           endif %}
{%         endfor %}
{%       endif %}
{#       # only add mailers that are in use to avoid config test warnings #}
{%       if ns.mailer_found %}
# Mailer: {{mailer.name}}
mailers {{mailer.id}}
    timeout mail {{mailer.timeout}}s
{%         if mailer.mailservers|default("") != "" %}
{%           for mailserver in mailer.mailservers.split(",") %}
    mailer {{mailserver}} {{mailserver}}
{%           endfor %}
{%         endif %}

{%       else %}
# NOTE: Mailer {{mailer.name}} ignored: not configured in any backend

{%       endif %}
{%     else %}
# Mailer (DISABLED): {{mailer.name}}

{%     endif %}
{%   endfor %}
{%- endif -%}

{# ############################### #}
{#             FRONTENDS           #}
{# ############################### #}

{% if helpers.exists('OPNsense.HAProxy.frontends') %}
{%   for frontend in helpers.toList('OPNsense.HAProxy.frontends.frontend') %}
{%     if frontend.enabled == '1' %}
# Frontend: {{frontend.name}} ({{frontend.description}})
frontend {{frontend.name}}
{%       set ssl_certs = [] %}
{%       set ssl_options = [] %}
{%       set adv_options = [] %}
{%       if frontend.ssl_enabled == '1' %}
{#         # check if ssl certs are configured #}
{%         if frontend.ssl_certificates|default("") != "" or frontend.ssl_default_certificate|default("") != "" %}
{#           # NOTE: Cert lists are generated by exportCerts.php #}
{%           do ssl_certs.append('crt-list /tmp/haproxy/ssl/' ~ frontend.id ~ '.certlist') %}
{%         endif %}
{#         # advanced ssl parameters (pass-through) #}
{%         if frontend.ssl_customOptions|default("") != "" %}
{%           do ssl_options.append(frontend.ssl_customOptions ~ ' ') %}
{%         endif %}
{#         # advanced ssl settings #}
{%         if frontend.ssl_advancedEnabled|default("") == '1' %}
{%           if frontend.ssl_bindOptions|default("") != "" %}
{%             for bindopt in frontend.ssl_bindOptions.split(",") %}
{%               do ssl_options.append(bindopt) %}
{%             endfor %}
{%           endif %}
{%           if frontend.ssl_minVersion|default("") != "" %}
{%             do ssl_options.append('ssl-min-ver ' ~ frontend.ssl_minVersion) %}
{%           endif %}
{%           if frontend.ssl_maxVersion|default("") != "" %}
{%             do ssl_options.append('ssl-max-ver ' ~ frontend.ssl_maxVersion) %}
{%           endif %}
{%           if frontend.ssl_cipherList|default("") != "" %}
{%             do ssl_options.append('ciphers ' ~ frontend.ssl_cipherList) %}
{%           endif %}
{%           if frontend.ssl_cipherSuites|default("") != "" %}
{%             if helpers.exists('system.firmware.flavour') and not(helpers.empty('system.firmware.flavour')) and system.firmware.flavour|default('') == 'libressl' %}
    # WARNING: ciphersuites cannot be used with flavour {{ system.firmware.flavour}}.
{%             else %}
{%               do ssl_options.append('ciphersuites ' ~ frontend.ssl_cipherSuites) %}
{%             endif %}
{%           endif %}
{#           # HSTS #}
{%           if frontend.ssl_hstsEnabled|default("") == '1' and frontend.mode == 'http' %}
{%             set hsts_options = [] %}
{%             do hsts_options.append('max-age=' ~ frontend.ssl_hstsMaxAge) %}
{%             if frontend.ssl_hstsIncludeSubDomains|default("") == '1' %}
{%               do hsts_options.append('; includeSubDomains') %}
{%             endif %}
{%             if frontend.ssl_hstsPreload|default("") == '1' %}
{%               do hsts_options.append('; preload') %}
{%             endif %}
    http-response set-header Strict-Transport-Security "{{ hsts_options|join('') }}"
{%           endif %}
{%         endif %}
{#         # configure client certificate authentication #}
{%         if frontend.ssl_clientAuthEnabled == '1' %}
{#           # check for CAs (required) #}
{%           if frontend.ssl_clientAuthCAs|default("") != "" %}
{#             # NOTE: CA lists are generated by exportCerts.php #}
{%             do ssl_options.append('ca-file /tmp/haproxy/ssl/' ~ frontend.id ~ '.calist') %}
{#             # check for verification mode #}
{%             if frontend.ssl_clientAuthVerify|default("") != "" %}
{%               do ssl_options.append('verify ' ~ frontend.ssl_clientAuthVerify) %}
{%             endif %}
{#             # check for CRL #}
{%             if frontend.ssl_clientAuthCRLs|default("") != "" %}
{#               # NOTE: CRL lists are generated by exportCerts.php #}
{%               do ssl_options.append('crl-file /tmp/haproxy/ssl/' ~ frontend.id ~ '.crllist') %}
{%             endif %}
{%           endif %}
{%         endif %}
{#         # HTTP/2 with TLS enabled #}
{%         if frontend.http2Enabled|default("") == '1' and frontend.advertised_protocols|default("") != "" %}
{#           # convert protocols to HAProxy-compatible format #}
{%           set alpn_options = frontend.advertised_protocols|replace('http10', 'http/1.0')|replace('http11', 'http/1.1') %}
{%           do ssl_options.append('alpn ' ~ alpn_options) %}
{%         endif %}
{#       # HTTP/2 without TLS #}
{%       elif frontend.http2Enabled|default("") == '1' and frontend.http2Enabled_nontls|default("") == '1' %}
{%         do adv_options.append('proto h2') %}
{%       endif %}
{#       # CPU affinity configuration #}
{%       set bind_process = [] %}
{%       if frontend.linkedCpuAffinityRules|default('') != '' %}
{%         for cpu_map in frontend.linkedCpuAffinityRules.split(',') %}
{%           set cpu_map_data = helpers.getUUID(cpu_map) %}
{%           if cpu_map_data.enabled == '1' %}
{#             # Limit visibility to a certain set of processes #}
{%             do bind_process.append(cpu_map_data.process_id|replace('x', '')) %}
{#             # Restrict the list of processes/threads on which this listener is allowed to run #}
{%             do adv_options.append('process ' ~ cpu_map_data.process_id|replace('x', '') ~ '/' ~ cpu_map_data.thread_id|replace('x', '')) %}
{%           endif %}
{%         endfor %}
{%         if bind_process|length > 0 %}
    bind-process {{bind_process|join(' ')}}
{%         endif %}
{%       endif %}
{#       # bind/listen configuration #}
{%       if frontend.bind|default("") != "" %}
{%         for bind in frontend.bind.split(",") %}
    bind {{bind}} name {{bind}} {% if frontend.bindOptions|default("") != "" %}{{ frontend.bindOptions }} {% endif %}{% if frontend.ssl_enabled == '1' and ssl_certs|default("") != "" %}ssl {{ ssl_options|join(' ') }} {{ ssl_certs|join(' ') }} {% endif %}{% if adv_options|length > 0 %} {{ adv_options|join(' ') }} {% endif %}

{%         endfor %}
{%       endif %}
{%       if frontend.mode == "ssl" %}
    mode tcp
{%       else %}
    mode {{frontend.mode}}
{%       endif %}
{%       if frontend.mode != "tcp" and frontend.mode != "ssl" %}
    option {{frontend.connectionBehaviour}}
{%       endif %}
{#       # select backend #}
{%       if frontend.defaultBackend|default("") != "" %}
{%         set backend_data = helpers.getUUID(frontend.defaultBackend) %}
    default_backend {{backend_data.name}}
{#         # check if persistence-related workaround is enabled #}
{%         if backend_data.persistence|default("") == 'cookie' and backend_data.persistence_stripquotes|default("") == '1' %}
    # remove quotes from persistence cookie
    http-request replace-header Cookie '^(.*?; )?({{backend_data.persistence_cookiename}}=)"([^;"]*)"(;.*)?$' \1\2\3\4
{%         endif %}
{%       endif %}
{%       if frontend.forwardFor == '1' and frontend.mode == 'http' %}
    option forwardfor
{%       endif %}
    # tuning options
{%       if frontend.tuning_maxConnections is defined %}
    maxconn {{frontend.tuning_maxConnections}}
{%       endif %}
{%       if frontend.tuning_timeoutClient is defined %}
    timeout client {{frontend.tuning_timeoutClient}}
{%       elif OPNsense.HAProxy.general.defaults.timeoutClient is defined %}
    timeout client {{OPNsense.HAProxy.general.defaults.timeoutClient}}
{%       endif %}
{%       if frontend.tuning_timeoutHttpReq|default("") != "" and frontend.mode == 'http' %}
    timeout http-request {{frontend.tuning_timeoutHttpReq}}
{%       endif %}
{%       if frontend.tuning_timeoutHttpKeepAlive|default("") != "" and frontend.mode == 'http' %}
    timeout http-keep-alive {{frontend.tuning_timeoutHttpKeepAlive}}
{%       endif %}
{#       # call macro to evaluate stickiness config #}
{{       StickTableConfig(frontend) }}
    # logging options
{%       if frontend.logging_dontLogNull=='1' %}
    option dontlognull
{%       endif %}
{%       if frontend.logging_dontLogNormal=='1' %}
    option dontlog-normal
{%       endif %}
{%       if frontend.logging_logSeparateErrors=='1' %}
    option log-separate-errors
{%       endif %}
{%       if frontend.logging_detailedLog=='1' %}
{#         # automatically select the best-suited log type #}
{%         if frontend.mode == 'tcp' or frontend.mode == 'ssl' %}
    option tcplog
{%         else %}
    option httplog
{%         endif %}
{%       endif %}
{%       if frontend.logging_socketStats=='1' %}
    option socket-stats
{%       endif %}
{#       # call macro to evaluate basic auth config #}
{{       BasicAuthConfig(frontend) -}}
{#       # action and ACL configuration #}
{%       if frontend.linkedActions|default("") != "" -%}
{#         # call macro to evaluate ACLs and actions #}
{{         AclsAndActions(frontend.linkedActions) }}
{%-      endif %}
{#       # error files #}
{%       if frontend.linkedErrorfiles|default("") != "" %}
{#         # call macro to evaluate error files #}
{{         ErrorFiles(frontend.linkedErrorfiles) }}
{%       endif %}
{%       if frontend.customOptions|default("") != "" %}
    # WARNING: pass through options below this line
{%         for customOpt in frontend.customOptions.split("\n") %}
    {{customOpt}}
{%         endfor %}
{%       endif %}

{%     else %}
# Frontend (DISABLED): {{frontend.name}} ({{frontend.description}})

{%     endif %}
{%   endfor %}
{%- endif -%}

{# ############################### #}
{#             BACKENDS            #}
{# ############################### #}

{%- if helpers.exists('OPNsense.HAProxy.backends') %}
{%   for backend in helpers.toList('OPNsense.HAProxy.backends.backend') %}
{#     # ignore disabled backends #}
{%     if backend.enabled == '1' %}
# Backend: {{backend.name}} ({{backend.description}})
backend {{backend.name}}
{%       if backend.linkedServers|default("") == "" %}
    # HINT: no servers configured for this backend.
{%       endif %}
{#       # store additional parameters for the "server" entries #}
{%       set healthcheck_additions = [] %}
{%       if backend.healthCheck|default("") != "" and backend.healthCheckEnabled == '1' %}
{%         set healthcheck_enabled = '1' %}
{%         if backend.healthCheckLogStatus == '1' %}
    option log-health-checks
{%         endif %}
{%         set healthcheck_data = helpers.getUUID(backend.healthCheck) %}
    # health check: {{healthcheck_data.name}}
{#         # health check option #}
{%         set healthcheck_options = [] %}
{%         if healthcheck_data.type|default("") == "" %}
{%           set healthcheck_enabled = '0' %}
{%         elif healthcheck_data.type == 'tcp' %}
{#           # custom TCP health check option #}
{%           if healthcheck_data.tcp_enabled|default("") == '1' %}
{#             # validate options: both must not be disabled at the same time #}
{%             if healthcheck_data.tcp_sendValue|default("") == "" and healthcheck_data.tcp_matchValue|default("") == "" %}
    # ERROR: invalid custom TCP health check, missing "sendValue" or "matchValue"
{%             else %}
{%               set healthcheck_customtcp = [] %}
{%               do healthcheck_customtcp.append('send ' ~ healthcheck_data.tcp_sendValue) if healthcheck_data.tcp_sendValue|default("") != "" %}
{%               if healthcheck_data.tcp_matchValue|default("") != "" %}
{%                 do healthcheck_customtcp.append('expect ' ~ healthcheck_data.tcp_matchType) %}
{%                 if healthcheck_data.tcp_negate == '1' and healthcheck_data.tcp_matchType|default("") != 'binary' %}
{%                   do healthcheck_customtcp.append('!') %}
{%                 endif %}
{%                 do healthcheck_customtcp.append(healthcheck_data.tcp_matchValue) %}
{%               endif %}
{#               # XXX: some values (send/match) must be properly escaped (whitespace) #}
{#               # TODO: add support for multiple send/expect steps #}
    option tcp-check
    tcp-check connect
    tcp-check {{healthcheck_customtcp|join(' ')}}
{%             endif %}
{%           endif %}
{%         elif healthcheck_data.type == 'http' %}
    option httpchk
{#           # HTTP method must be uppercase #}
{%           do healthcheck_options.append('send meth') %}
{%           do healthcheck_options.append(healthcheck_data.http_method|upper) %}
{%           do healthcheck_options.append('uri') %}
{%           do healthcheck_options.append(healthcheck_data.http_uri) %}
{#           # HTTP Host header requires HTTP 1.1 #}
{%           if (healthcheck_data.http_version == 'http11' or healthcheck_data.http_version == 'http2') and healthcheck_data.http_host|default('') != '' %}
{%             do healthcheck_options.append('ver HTTP/1.1 hdr Host ' ~ healthcheck_data.http_host) if healthcheck_data.http_version == 'http11' %}
{%             do healthcheck_options.append('ver HTTP/2 hdr Host ' ~ healthcheck_data.http_host) if healthcheck_data.http_version == 'http2' %}
{%           elif healthcheck_data.http_version == 'http10' %}
{%             do healthcheck_options.append('ver HTTP/1.0') %}
{%           endif %}
    http-check {{healthcheck_options|join(' ')}}
{#           # custom HTTP health check option #}
{%           if healthcheck_data.http_expressionEnabled|default("") == '1' %}
{#             # validate options #}
{%             if healthcheck_data.http_expression|default("") == "" or healthcheck_data.http_value|default("") == "" %}
    # ERROR: invalid custom HTTP health check, missing "expression" or "value"
{%             else %}
{%               set healthcheck_customhttp = [] %}
{%               do healthcheck_customhttp.append(healthcheck_data.http_expression) %}
{%               do healthcheck_customhttp.append('!') if healthcheck_data.http_negate == '1' %}
{#               # XXX: some values must be properly escaped (whitespace) #}
{%               do healthcheck_customhttp.append(healthcheck_data.http_value) %}
    http-check expect {{healthcheck_customhttp|join(' ')}}
{%             endif %}
{%           endif %}
{%         elif healthcheck_data.type == 'agent' %}
{%           if healthcheck_data.agent_port|default("") != "" %}
{%             do healthcheck_additions.append('agent-check agent-port ' ~ healthcheck_data.agent_port) %}
{%           else %}
    # ERROR: agent-check configured, but agent-port was not specified
{%           endif %}
{%         elif healthcheck_data.type == 'ldap' %}
    option ldap-check
{%         elif healthcheck_data.type == 'mysql'  %}
{%           if healthcheck_data.mysql_user|default("") != "" %}
{%             if healthcheck_data.mysql_post41|default("") == '1' %}
    option mysql-check user {{healthcheck_data.mysql_user}} post-41
{%             else %}
    option mysql-check user {{healthcheck_data.mysql_user}}
{%             endif %}
{%           else %}
    # ERROR: {{healthcheck_data.type}} check configured, but db user was not specified
{%           endif %}
{%         elif healthcheck_data.type == 'pgsql' %}
{%           if healthcheck_data.pgsql_user|default("") != "" %}
    option pgsql-check user {{healthcheck_data.pgsql_user}}
{%           else %}
    # ERROR: {{healthcheck_data.type}} check configured, but db user was not specified
{%           endif %}
{%         elif healthcheck_data.type == 'redis' %}
    option redis-check
{%         elif healthcheck_data.type == 'smtp' %}
    option smtpchk HELO {{healthcheck_data.smtp_domain}}
{%         elif healthcheck_data.type == 'esmtp' %}
    option smtpchk EHLO {{healthcheck_data.esmtp_domain}}
{%         elif healthcheck_data.type == 'ssl' %}
    option ssl-hello-chk
{%         endif %}
{%       else %}
    # health checking is DISABLED
{%         set healthcheck_enabled = '0' %}
{%       endif %}
{# # mailer #}
{%       if backend.linkedMailer|default("") != "" %}
{%         set mailer_data = helpers.getUUID(backend.linkedMailer) %}
{%         if mailer_data == {} %}
# ERROR: mailer data not found ({{backend.linkedMailer}})
{%         elif mailer_data.enabled == '0' %}
# NOTE: specified mailer is disabled ({{mailer_data.name}})
{%         else %}
    email-alert mailers {{mailer_data.id}}
    email-alert from {{mailer_data.sender}}
    email-alert to {{mailer_data.recipient}}
    email-alert level {{mailer_data.loglevel}}
{%           if mailer_data.hostname|default("") != "" %}
    email-alert myhostname {{mailer_data.hostname}}
{%           endif %}
{%         endif %}
{%       endif %}
{#       # NOTE: Usually the frontend and the backend are in the same mode,  #}
{#       #       but we have no way to know what frontend uses this backend. #}
{#       #       Hence we can't automatically set the mode and thus need a   #}
{#       #       (redundant) GUI option for this.                            #}
    mode {{backend.mode}}
{#  # balancing algorithm #}
{%  if backend.algorithm|default("") == 'random' %}
    balance {{backend.algorithm}}({{backend.random_draws}})
{%  else %}
    balance {{backend.algorithm}}
{%  endif %}
{#       # call macro to evaluate stickiness config #}
{{       StickTableConfig(backend,true) }}
    # tuning options
{%       if backend.tuning_timeoutConnect|default("") != "" %}
    timeout connect {{backend.tuning_timeoutConnect}}
{%       elif OPNsense.HAProxy.general.defaults.timeoutConnect is defined %}
    timeout connect {{OPNsense.HAProxy.general.defaults.timeoutConnect}}
{%       endif %}
{%       if backend.tuning_timeoutCheck|default("") != "" %}
    timeout check {{backend.tuning_timeoutCheck}}
{%       elif OPNsense.HAProxy.general.defaults.timeoutCheck is defined %}
    timeout check {{OPNsense.HAProxy.general.defaults.timeoutCheck}}
{%       endif %}
{%       if backend.tuning_timeoutServer|default("") != "" %}
    timeout server {{backend.tuning_timeoutServer}}
{%       elif OPNsense.HAProxy.general.defaults.timeoutServer is defined %}
    timeout server {{OPNsense.HAProxy.general.defaults.timeoutServer}}
{%       endif %}
{%       if backend.tuning_retries|default("") != "" %}
    retries {{backend.tuning_retries}}
{%       endif %}
{#       # call macro to evaluate basic auth config #}
{{       BasicAuthConfig(backend) -}}
{#       # action and ACL configuration #}
{%       if backend.linkedActions|default("") != "" -%}
{#         # call macro to evaluate ACLs and actions #}
{{         AclsAndActions(backend.linkedActions) }}
{%-      endif %}
{#       # error files #}
{%       if backend.linkedErrorfiles|default("") != "" %}
{#         # call macro to evaluate error files #}
{{         ErrorFiles(backend.linkedErrorfiles) }}
{%       endif %}
{%       if backend.customOptions|default("") != "" %}
    # WARNING: pass through options below this line
{%         for customOpt in backend.customOptions.split("\n") %}
    {{customOpt}}
{%         endfor %}
{%       endif %}
{%       if backend.tuning_httpreuse|default("") != "" and backend.mode == "http" %}
    http-reuse {{backend.tuning_httpreuse}}
{%       endif %}
{%       if helpers.exists('OPNsense.HAProxy.general.cache') and OPNsense.HAProxy.general.cache.enabled|default("") == "1" and backend.tuning_caching|default("") == "1" and backend.mode == "http" %}
    http-request cache-use opnsense-haproxy-cache
    http-response cache-store opnsense-haproxy-cache
{%       endif %}
{%       if backend.tuning_defaultserver|default("") != "" %}
    default-server {{backend.tuning_defaultserver}}
{%       endif %}
{#       # check if this backend has any servers configured #}
{%       if backend.linkedServers|default("") != "" %}
{%         for server in backend.linkedServers.split(",") %}
{%           set server_data = helpers.getUUID(server) %}
{#           # check if this server can be found in configuration #}
{%           if server_data == {} %}
# ERROR: server data not found ({{server}})
{%           else %}
{#             # check if all required server parameters are set #}
{%             if (server_data.type|default("") == 'static' and server_data.address|default("") == '') or (server_data.type|default("") == 'template' and (server_data.serviceName|default("") == '' or server_data.number|default("") == '')) %}
# ERROR: server is invalid, required parameters not set ({{server_data.name}})
{%             else %}
{#               # server type #}
{%               set server_basics = [] %}
{%               if server_data.type|default("") == 'template' %}
{%                 do server_basics.append('server-template ' ~ server_data.name ~ ' ' ~ server_data.number ~ ' ' ~ server_data.serviceName) %}
{%               else %}
{%                 do server_basics.append('server ' ~ server_data.name ~ ' ' ~ server_data.address) %}
{%               endif %}
{#               # collect optional server parameters #}
{%               set server_options = [] %}
{#               # check if health check is enabled #}
{%               if healthcheck_enabled == '1' %}
{%                 do server_options.append('check') %}
{#                 # This can be configured in multiple places. #}
{#                 # Priority for which value is used: backend > server > health check #}
{%                 if backend.checkInterval|default("") != "" %}
{%                   do server_options.append('inter ' ~ backend.checkInterval) %}
{%                 elif server_data.checkInterval|default("") != "" %}
{%                   do server_options.append('inter ' ~ server_data.checkInterval) %}
{%                 elif healthcheck_data.interval|default("") != "" %}
{%                   do server_options.append('inter ' ~ healthcheck_data.interval) %}
{%                 endif %}
{#                 # use a different interval when server is in DOWN state #}
{%                 if backend.checkDownInterval|default("") != "" %}
{%                   do server_options.append('downinter ' ~ backend.checkDownInterval) %}
{%                 elif server_data.checkDownInterval|default("") != "" %}
{%                   do server_options.append('downinter ' ~ server_data.checkDownInterval) %}
{%                 endif %}
{#                 # unhealthy threshold #}
{%                 if backend.healthCheckFall|default("") != "" %}
{%                   do server_options.append('fall ' ~ backend.healthCheckFall) %}
{%                 endif %}
{#                 # healthy threshold #}
{%                 if backend.healthCheckRise|default("") != "" %}
{%                   do server_options.append('rise ' ~ backend.healthCheckRise) %}
{%                 endif %}
{#                 # use a different port for health check #}
{%                 if healthcheck_data.checkport|default("") != "" %}
{#                   # prefer port from health check template #}
{%                   do server_options.append('port ' ~ healthcheck_data.checkport) %}
{%                 elif server_data.checkport|default("") != "" %}
{%                   do server_options.append('port ' ~ server_data.checkport) %}
{%                 endif %}
{#                 # force SSL encryption for health checks #}
{%                 if healthcheck_data.force_ssl|default('') == '1' %}
{%                   do server_options.append('check-ssl ') %}
{%                 endif %}
{#                 # add all additions from healthchecks here #}
{%                 do server_options.append(healthcheck_additions|join(' ')) if healthcheck_additions.length != '0' %}
{%               endif %}
{#               # server weight #}
{%               do server_options.append('weight ' ~ server_data.weight) if server_data.weight|default("") != "" %}
{#               # server role/mode #}
{%               if server_data.mode|default("") != 'active' %}
{%                 do server_options.append(server_data.mode) %}
{%               endif %}
{#               # server ssl communication #}
{%               if server_data.ssl|default("") == '1' %}
{%                 do server_options.append('ssl') %}
{#                 # HTTP/2 #}
{%                 if backend.http2Enabled|default("") == '1' and backend.ba_advertised_protocols|default("") != "" %}
{#                   # convert protocols to HAProxy-compatible format #}
{%                   set alpn_options = backend.ba_advertised_protocols|replace('http10', 'http/1.0')|replace('http11', 'http/1.1') %}
{%                   do server_options.append('alpn ' ~ alpn_options) %}
{%                 endif %}
{#               # HTTP/2 without TLS #}
{%               elif backend.http2Enabled|default("") == '1' and backend.http2Enabled_nontls|default("") == '1' %}
{%                 do server_options.append('proto h2') %}
{%               endif %}
{#               # ssl verification can be enabled for two reasons: #}
{#               # 1. in server settings: to verify *all* communication to this server #}
{#               # 2. in health checks: to verify *only* health check communication to this server #}
{#               # When 1. is enabled, health checks are automatically secured. #}
{#               # Use-case for 2: when using TCP for server communication, but HTTPS for health checks. #}
{%               if server_data.ssl|default("") == '1' or (healthcheck_enabled == '1' and healthcheck_data.force_ssl|default('') == '1') %}
{#                 # get status of ssl verification #}
{%                 set ssl_verify_enabled = '0' %}
{%                 if helpers.exists('OPNsense.HAProxy.general.tuning.sslServerVerify') and OPNsense.HAProxy.general.tuning.sslServerVerify|default("") != 'ignore' %}
{#                   # NOTE: Global parameter overrides per-server configuration. #}
{%                   set ssl_verify_enabled = '1' if OPNsense.HAProxy.general.tuning.sslServerVerify|default("") == 'required' %}
{%                 elif server_data.sslVerify|default("") == '1' %}
{%                   set ssl_verify_enabled = '1' %}
{%                 endif %}
{#                 # configure ssl verification #}
{%                 if ssl_verify_enabled == '1' %}
{#                   # enable SSL verification #}
{%                   do server_options.append('verify required') %}
{#                   # check for SSL CA #}
{%                   if server_data.sslCA|default("") != "" %}
{%                     do server_options.append('ca-file /tmp/haproxy/ssl/' ~ server_data.id ~ '.calist') %}
{%                   else %}
{#                     # fallback to system CA Root Certificates #}
{%                     do server_options.append('ca-file /etc/ssl/cert.pem') %}
{%                   endif %}
{#                   # check for SSL CRL #}
{%                   if server_data.sslCRL|default("") != "" %}
{%                     do server_options.append('crl-file /tmp/haproxy/ssl/' ~ server_data.sslCRL ~ '.pem') %}
{%                   endif %}
{#                   # check for SSL client cert #}
{%                   if server_data.sslClientCertificate|default("") != "" %}
{%                     do server_options.append('crt /tmp/haproxy/ssl/' ~ server_data.sslClientCertificate ~ '.pem') %}
{%                   endif %}
{%                 else %}
{%                   do server_options.append('verify none') %}
{%                 endif %}
{%               endif %}
{#               # resolver #}
{%               set resolver_id = '' %}
{%               set resolver_opts  = '' %}
{%               if backend.linkedResolver|default("") != "" %}
{#                 # prefer backend configuration #}
{%                 set resolver_id = backend.linkedResolver %}
{%                 if backend.resolverOpts|default("") != "" %}
{%                   set resolver_opts = backend.resolverOpts %}
{%                 endif %}
{%               elif server_data.linkedResolver|default("") != "" and server_data.type|default("") == 'template' %}
{#                 # use resolver for server template #}
{%                 set resolver_id = server_data.linkedResolver %}
{%                 if server_data.resolverOpts|default("") != "" %}
{%                   set resolver_opts = server_data.resolverOpts %}
{%                 endif %}
{%               endif %}
{%               if resolver_id != '' %}
{%                 set resolver_data = helpers.getUUID(resolver_id) %}
{%                 do server_options.append('resolvers ' ~ resolver_data.id) %}
{#                 # additional resolver options #}
{%                 if resolver_opts != '' %}
{%                   do server_options.append('resolve-opts ' ~ resolver_opts) %}
{%                 endif %}
{%               endif %}
{#               # prefer selected IP family for DNS resolution #}
{%               if backend.resolvePrefer|default("") != "" %}
{#                 # prefer backend configuration #}
{%                 do server_options.append('resolve-prefer ' ~ backend.resolvePrefer) %}
{%               elif server_data.linkedResolver|default("") != "" %}
{%                 do server_options.append('resolve-prefer ' ~ server_data.resolvePrefer) %}
{%               endif %}
{#               # source address #}
{%               if backend.source|default("") != "" %}
{#                 # prefer backend configuration #}
{%                 do server_options.append('source ' ~ backend.source) %}
{%               elif server_data.source|default("") != "" %}
{%                 do server_options.append('source ' ~ server_data.source) %}
{%               endif %}
{#               # PROXY protocol #}
{%               if backend.proxyProtocol|default("") == "v1" %}
{%                 do server_options.append('send-proxy') %}
{%                 do server_options.append('check-send-proxy') %}
{%               elif backend.proxyProtocol|default("") == "v2" %}
{%                 do server_options.append('send-proxy-v2') %}
{%                 do server_options.append('check-send-proxy') %}
{%               endif %}
{#               # cookie-based persistence #}
{%               if backend.persistence|default("") == "cookie" %}
{%                 do server_options.append('cookie ' ~ server_data.id|replace(".", "")) %}
{%               endif %}
{#               # server advanced options #}
{%               if server_data.advanced|default("") != "" %}
{%                 do server_options.append(server_data.advanced) %}
{%               endif %}
{#               # server enabled? #}
{%               if server_data.enabled == '1' %}
    {{server_basics|join(' ')}}{% if backend.tuning_noport != '1' %}{% if server_data.port|default("") != "" %}:{{server_data.port}}{% endif %}{% endif %} {{server_options|join(' ')}}
{%               endif %}
{%             endif %}
{%           endif %}
{%         endfor %}
{%       endif %}

{%     else %}
# Backend (DISABLED): {{backend.name}} ({{backend.description}})

{%     endif %}
{%   endfor %}
{%- endif -%}

{# ############################### #}
{#               PEERS             #}
{# ############################### #}

{%- if helpers.exists('OPNsense.HAProxy.general.peers') and OPNsense.HAProxy.general.peers.enabled|default("") == "1" %}
{#   # ensure that no value is missing #}
{%   if OPNsense.HAProxy.general.peers.name1|default("") != '' and
       OPNsense.HAProxy.general.peers.listen1|default("") != '' and
       OPNsense.HAProxy.general.peers.port1|default("") != '' and
       OPNsense.HAProxy.general.peers.name2|default("") != '' and
       OPNsense.HAProxy.general.peers.listen2|default("") != '' and
       OPNsense.HAProxy.general.peers.port2|default("") != '' %}
peers {{peers_name}}
    peer {{OPNsense.HAProxy.general.peers.name1}} {{OPNsense.HAProxy.general.peers.listen1}}:{{OPNsense.HAProxy.general.peers.port1}}
    peer {{OPNsense.HAProxy.general.peers.name2}} {{OPNsense.HAProxy.general.peers.listen2}}:{{OPNsense.HAProxy.general.peers.port2}}
{%   endif %}
{%- endif -%}

{# ############################### #}
{#             STATISTICS          #}
{# ############################### #}

{%- if helpers.exists('OPNsense.HAProxy.general.stats') and OPNsense.HAProxy.general.stats.enabled|default("") == "1" %}
{# # enable local stats #}
listen local_statistics
    bind            127.0.0.1:{{OPNsense.HAProxy.general.stats.port}}
    mode            http
    stats uri       /haproxy?stats
    stats realm     HAProxy\ statistics
    stats admin     if TRUE
{%   if OPNsense.HAProxy.general.stats.customOptions|default("") != "" %}
    # WARNING: pass through options below this line
{%     for customOpt in OPNsense.HAProxy.general.stats.customOptions.split("\n") %}
    {{customOpt}}
{%     endfor %}
{%   endif %}

{# # remote stats are optional #}
{%   if OPNsense.HAProxy.general.stats.remoteEnabled|default("") == "1" %}
{%     if OPNsense.HAProxy.general.stats.remoteBind|default("") != "" %}
listen  remote_statistics
{%       for bind in OPNsense.HAProxy.general.stats.remoteBind.split(",") %}
    bind            {{bind}}
{%       endfor %}
    mode            http
    stats uri       /haproxy?stats
    stats hide-version
{#       # enable authentication? #}
{%       if OPNsense.HAProxy.general.stats.authEnabled|default("") == "1" %}
    acl auth_ok http_auth(stats_auth)
    stats http-request allow if auth_ok
    stats http-request auth realm HAProxy\ statistics
{%       endif %}
{%       if OPNsense.HAProxy.general.stats.customOptions|default("") != "" %}
    # WARNING: pass through options below this line
{%         for customOpt in OPNsense.HAProxy.general.stats.customOptions.split("\n") %}
    {{customOpt}}
{%         endfor %}
{%       endif %}
{%     else %}
# ERROR: remote statistics disabled, because no listen address was specified
{%     endif %}
{%   else %}
# statistics are DISABLED
{%   endif %}

{% endif %}
{%- endif -%}
