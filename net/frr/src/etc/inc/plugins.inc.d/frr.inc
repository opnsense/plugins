<?php

/*
 * Copyright (C) 2018 Franco Fichtner <franco@opnsense.org>
 * Copyright (C) 2017 Fabian Franz
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

function frr_enabled()
{
    $model = new \OPNsense\Quagga\General();
    return (string)$model->enabled == '1';
}

function frr_carp_enabled()
{
    $model = new \OPNsense\Quagga\General();
    return (string)$model->enabled == '1' &&
        (string)$model->enablecarp == '1';
}

function frr_firewall($fw)
{
    global $config;
    if (empty((string)(new \OPNsense\Quagga\General())->fwrules)) {
        // automatic rules disabled
        return;
    }
    $ospf = new \OPNsense\Quagga\OSPF();

    if ((string)$ospf->enabled == '1') {
        $ospf_default = [
            'ipprotocol'     => 'inet',
            'protocol'       => 'ospf',
            'statetype'      => 'keep',
            'type'           => 'pass',
            'disablereplyto' => 1,
            'quick'          => true,
            'log'            => !isset($config['syslog']['nologdefaultpass']),
            '#ref'           => 'ui/quagga/general/index',
        ];
        foreach ($ospf->networks->network->iterateItems() as $network) {
            if ((string)$network->enabled == '1') {
                $fw->registerFilterRule(
                    1, /* priority */
                    [
                        'descr'          => 'Pass OSPF (autogenerated)',
                        'from'           => $network->ipaddr . '/' . $network->netmask,
                        'to'             => '224.0.0.0/24',
                        'direction'      => 'in'
                    ],
                    $ospf_default
                );
                $fw->registerFilterRule(
                    1,
                    [
                        'descr'          => 'Pass OSPF UNICAST (autogenerated)',
                        'from'           => $network->ipaddr . '/' . $network->netmask,
                        'to'             => '(self)',
                        'direction'      => 'in'
                    ],
                    $ospf_default
                );
                $fw->registerFilterRule(
                    1,
                    [
                        'descr'          => 'Pass OSPF (autogenerated)',
                        'from'           => '(self)',
                        'to'             => '224.0.0.0/24',
                        'direction'      => 'out'
                    ],
                    $ospf_default
                );
                $fw->registerFilterRule(
                    1,
                    [
                        'descr'          => 'Pass OSPF UNICAST (autogenerated)',
                        'from'           => '(self)',
                        'to'             => $network->ipaddr . '/' . $network->netmask,
                        'direction'      => 'out',
                    ],
                    $ospf_default
                );
            }
        }
    }

    $ospf6 = new \OPNsense\Quagga\OSPF6();

    if ((string)$ospf6->enabled == '1') {
        $ospf6_default = [
            'ipprotocol'     => 'inet6',
            'protocol'       => 'ospf',
            'statetype'      => 'keep',
            'type'           => 'pass',
            'disablereplyto' => 1,
            'quick'          => true,
            'log'            => !isset($config['syslog']['nologdefaultpass']),
            '#ref'           => 'ui/quagga/general/index',
        ];

        foreach ($ospf6->interfaces->interface->iterateItems() as $interface) {
            if ((string)$interface->enabled == '1') {
                $fw->registerFilterRule(
                    1, /* priority */
                    [
                        'interface'      => (string)$interface->interfacename,
                        'descr'          => 'Pass OSPF6 MULTICAST (autogenerated)',
                        'from'           => 'fe80::0/10',
                        'to'             => 'ff02::5/128',
                        'direction'      => 'in'
                    ],
                    $ospf6_default
                );
                $fw->registerFilterRule(
                    1, /* priority */
                    [
                        'interface'      => (string)$interface->interfacename,
                        'descr'          => 'Pass OSPF6 MULTICAST DR (autogenerated)',
                        'from'           => 'fe80::0/10',
                        'to'             => 'ff02::6/128',
                        'direction'      => 'in'
                    ],
                    $ospf6_default
                );
                $fw->registerFilterRule(
                    1,
                    [
                        'interface'      => (string)$interface->interfacename,
                        'descr'          => 'Pass OSPF6 UNICAST (autogenerated)',
                        'from'           => 'fe80::0/10',
                        'to'             => '(self)',
                        'direction'      => 'in'
                    ],
                    $ospf6_default
                );
                $fw->registerFilterRule(
                    1,
                    [
                        'interface'      => (string)$interface->interfacename,
                        'descr'          => 'Pass OSPF6 MULTICAST (autogenerated)',
                        'from'           => '(self)',
                        'to'             => 'ff02::5/128',
                        'direction'      => 'out'
                    ],
                    $ospf6_default
                );
                $fw->registerFilterRule(
                    1,
                    [
                        'interface'      => (string)$interface->interfacename,
                        'descr'          => 'Pass OSPF6 MULTICAST DR (autogenerated)',
                        'from'           => '(self)',
                        'to'             => 'ff02::6/128',
                        'direction'      => 'out'
                    ],
                    $ospf6_default
                );
                $fw->registerFilterRule(
                    1,
                    [
                        'interface'      => (string)$interface->interfacename,
                        'descr'          => 'Pass OSPF6 UNICAST (autogenerated)',
                        'from'           => '(self)',
                        'to'             => 'fe80::0/10',
                        'direction'      => 'out'
                    ],
                    $ospf6_default
                );
            }
        }
    }
}

function frr_services()
{
    $services = array();

    if (frr_enabled()) {
        $services[] = array(
            'description' => gettext('FRRouting Daemon'),
            'configd' => array(
                'restart' => array('quagga restart'),
                'start' => array('quagga start'),
                'stop' => array('quagga stop'),
            ),
            'name' => 'frr',
            'pidfile' => '/var/run/frr/zebra.pid'
        );
    }

    return $services;
}

function frr_xmlrpc_sync()
{
    $result = array();
    $result['id'] = 'quagga';
    $result['section'] = 'OPNsense.quagga';
    $result['description'] = gettext('FRR');
    $result['services'] = ['frr'];
    return array($result);
}
