{% if helpers.exists('OPNsense.quagga.bgp.enabled') and OPNsense.quagga.bgp.enabled == '1' %}
{%   from 'OPNsense/Macros/interface.macro' import physical_interface %}
{%   set addressFamilies = ['ipv4', 'ipv6' ] %}
{%   set neighbors = {'ipv4': [], 'ipv6': []} %}
{%   set networks = {'ipv4': [], 'ipv6': []} %}

{%   if helpers.exists('OPNsense.quagga.bgp.neighbors.neighbor') %}
{%     for neighbor in helpers.toList('OPNsense.quagga.bgp.neighbors.neighbor') %}
{%       if neighbor.enabled == '1' and neighbor.multiprotocol == '1' %}
{#         // the .append() method in Jinja2 returns "None", so filter through default() to suppress #}
{{         neighbors['ipv4'].append(neighbor) | default("", True) }}
{{         neighbors['ipv6'].append(neighbor) | default("", True) }}
{%       elif neighbor.enabled == '1' and ':' not in neighbor.address %}
{{         neighbors['ipv4'].append(neighbor) | default("", True) }}
{%       elif neighbor.enabled == '1' and ':' in neighbor.address %}
{{         neighbors['ipv6'].append(neighbor) | default("", True) }}
{%       endif %}
{%     endfor %}
{%   endif %}
{%   if helpers.exists('OPNsense.quagga.bgp.networks') %}
{%     for network in OPNsense.quagga.bgp.networks.split(',') %}
{%       if ':' not in network %}
{{         networks['ipv4'].append(network) | default("", True) }}
{%       elif ':' in network %}
{{         networks['ipv6'].append(network) | default("", True) }}
{%       endif %}
{%     endfor %}
{%   endif %}
!
! Zebra configuration saved from vty
!   2017/03/03 20:21:04
!
{% if helpers.exists('OPNsense.quagga.general') %}
{%   if helpers.exists('OPNsense.quagga.general.enablesyslog') and OPNsense.quagga.general.enablesyslog == '1' %}
log syslog {{ OPNsense.quagga.general.sysloglevel }}
{%   endif %}
{%   if helpers.exists('OPNsense.quagga.general.profile') %}
frr defaults {{ OPNsense.quagga.general.profile }}
{%   endif %}
{% endif %}
!
!
!
{% if helpers.exists('OPNsense.quagga.bgp.asnumber') and OPNsense.quagga.bgp.asnumber != '' %}
router bgp {{ OPNsense.quagga.bgp.asnumber }}
{%   if not helpers.empty('OPNsense.quagga.bgp.logneighborchanges') %}
 bgp log-neighbor-changes
{%   endif %}
 no bgp default ipv4-unicast
 no bgp ebgp-requires-policy
{%   if helpers.exists('OPNsense.quagga.bgp.networkimportcheck') and OPNsense.quagga.bgp.networkimportcheck == '1' %}
 bgp network import-check
{%   else %}
 no bgp network import-check
{%   endif %}
{%   if helpers.exists('OPNsense.quagga.bgp.graceful') and OPNsense.quagga.bgp.graceful == '1' %}
 bgp graceful-restart
{%   endif %}
{%   if helpers.exists('OPNsense.quagga.bgp.routerid') and OPNsense.quagga.bgp.routerid != '' %}
 bgp router-id {{ OPNsense.quagga.bgp.routerid }}
{%   endif %}
{%   if helpers.exists('OPNsense.quagga.bgp.neighbors.neighbor') %}
{%     for neighbor in helpers.toList('OPNsense.quagga.bgp.neighbors.neighbor') %}
{%       if neighbor.enabled == '1' %}
 neighbor {{ neighbor.address }} remote-as {{ neighbor.remoteas }}
{%         if neighbor.bfd|default('') == '1' %}
 neighbor {{ neighbor.address }} bfd
{%         endif %}
{%         if 'password' in neighbor and neighbor.password != '' %}
 neighbor {{ neighbor.address }} password {{ neighbor.password }}
{%         endif %}
{%         if 'weight' in neighbor and neighbor.weight != '' %}
 neighbor {{ neighbor.address }} weight {{ neighbor.weight }}
{%         endif %}
{%         if 'disable_connected_check' in neighbor and neighbor.disable_connected_check == '1' %}
 neighbor {{ neighbor.address }} disable-connected-check
{%         endif %}
{%         if ':' not in neighbor.address and 'updatesource' in neighbor and neighbor.updatesource != '' %}
 neighbor {{ neighbor.address }} update-source {{ physical_interface(neighbor.updatesource) }}
{%         endif %}
{%         if ':' in neighbor.address and 'linklocalinterface' in neighbor and neighbor.linklocalinterface != '' %}
 neighbor {{ neighbor.address }} interface {{ physical_interface(neighbor.linklocalinterface) }}
{%         endif %}
{%         if 'multihop' in neighbor and neighbor.multihop == '1' %}
 neighbor {{ neighbor.address }} ebgp-multihop
{%         endif %}
{%         if 'keepalive' in neighbor and neighbor.keepalive != '' %}
{%           if 'holddown' in neighbor and neighbor.holddown != '' %}
 neighbor {{ neighbor.address }} timers {{ neighbor.keepalive }} {{ neighbor.holddown }}
{%           endif %}
{%         endif %}
{%         if 'connecttimer' in neighbor and neighbor.connecttimer != '' %}
 neighbor {{ neighbor.address }} timers connect {{ neighbor.connecttimer }}
{%         endif %}
{%         if 'attributeunchanged' in neighbor and neighbor.attributeunchanged != '' %}
 neighbor {{ neighbor.address }} attribute-unchanged {{ neighbor.attributeunchanged }}
{%         endif %}
{%       endif %}
{%     endfor %}
{%   endif %}

{%  for addressFamily in addressFamilies %}
 address-family {{ addressFamily }} unicast
{%   if helpers.exists('OPNsense.quagga.bgp.redistribute') and OPNsense.quagga.bgp.redistribute != '' %}
{%     for bgp_redistribute in OPNsense.quagga.bgp.redistribute.split(',') %}
  redistribute {{ bgp_redistribute }}
{%     endfor %}
{%   endif %}
{%   for network in networks[addressFamily] %}
  network {{ network }}
{%   endfor %}
{%   for neighbor in neighbors[addressFamily] %}
 neighbor {{ neighbor.address }} activate
{%     if 'nexthopself' in neighbor and neighbor.nexthopself == '1' %}
  neighbor {{ neighbor.address }} next-hop-self {% if 'nexthopselfall' in neighbor and neighbor.nexthopselfall == '1' %}all{%  endif %}

{%     endif %}
{%     if 'rrclient' in neighbor and neighbor.rrclient == '1' %}
  neighbor {{ neighbor.address }} route-reflector-client
{%     endif %}
{%     if 'defaultoriginate' in neighbor and neighbor.defaultoriginate == '1' %}
  neighbor {{ neighbor.address }} default-originate
{%     endif %}
{%     if 'asoverride' in neighbor and neighbor.asoverride == '1' %}
  neighbor {{ neighbor.address }} as-override
{%         endif %}
{%     if neighbor.linkedPrefixlistIn|default("") != "" %}
{%       for prefixlist in neighbor.linkedPrefixlistIn.split(",") %}
{%         set prefixlist2_data = helpers.getUUID(prefixlist) %}
{%         if prefixlist2_data != {} and prefixlist2_data.enabled == '1' %}
  neighbor {{ neighbor.address }} prefix-list {{ prefixlist2_data.name }} in
{%         endif %}
{%       endfor %}
{%     endif %}
{%     if neighbor.linkedPrefixlistOut|default("") != "" %}
{%       for prefixlist in neighbor.linkedPrefixlistOut.split(",") %}
{%         set prefixlist_data = helpers.getUUID(prefixlist) %}
{%         if prefixlist_data != {} and prefixlist_data.enabled == '1' %}
  neighbor {{ neighbor.address }} prefix-list {{ prefixlist_data.name }} out
{%         endif %}
{%       endfor %}
{%     endif %}
{%     if neighbor.linkedRoutemapIn|default("") != "" %}
{%       for aspath in neighbor.linkedRoutemapIn.split(",") %}
{%         set routemap2_data = helpers.getUUID(aspath) %}
{%         if routemap2_data != {} and routemap2_data.enabled == '1' %}
  neighbor {{ neighbor.address }} route-map {{ routemap2_data.name }} in
{%         endif %}
{%       endfor %}
{%     endif %}
{%     if neighbor.linkedRoutemapOut|default("") != "" %}
{%       for aspath in neighbor.linkedRoutemapOut.split(",") %}
{%         set routemap_data = helpers.getUUID(aspath) %}
{%         if routemap_data != {} and routemap_data.enabled == '1' %}
  neighbor {{ neighbor.address }} route-map {{ routemap_data.name }} out
{%         endif %}
{%       endfor %}
{%     endif %}
{%   endfor %}
 exit-address-family
!
{%  endfor %}

{%   if helpers.exists('OPNsense.quagga.bgp.prefixlists.prefixlist') %}
{%     for prefixlist in helpers.sortDictList(OPNsense.quagga.bgp.prefixlists.prefixlist, 'name', 'seqnumber' ) %}
{%       if prefixlist.enabled == '1' and prefixlist.version == 'IPv4' %}
ip prefix-list {{ prefixlist.name }} seq {{ prefixlist.seqnumber }} {{ prefixlist.action }} {{ prefixlist.network }}
{%       endif %}
!
{%       if prefixlist.enabled == '1' and prefixlist.version == 'IPv6' %}
ipv6 prefix-list {{ prefixlist.name }} seq {{ prefixlist.seqnumber }} {{ prefixlist.action }} {{ prefixlist.network }}
{%       endif %}
{%     endfor %}
{%   endif %}
!
{%   if helpers.exists('OPNsense.quagga.bgp.aspaths.aspath') %}
{%     for aspath in helpers.sortDictList(OPNsense.quagga.bgp.aspaths.aspath, 'number' ) %}
{%       if aspath.enabled == '1' %}
bgp as-path access-list {{ aspath.number }} {{ aspath.action }} {{ aspath.as }}
{%       endif %}
{%     endfor %}
{%   endif %}
!
{%   if helpers.exists('OPNsense.quagga.bgp.communitylists.communitylist') %}
{%     for communitylist in helpers.sortDictList(OPNsense.quagga.bgp.communitylists.communitylist, 'number' ) %}
{%       if communitylist.enabled == '1' %}
bgp community-list {{ communitylist.number }} seq {{ communitylist.seqnumber }} {{ communitylist.action }} {{ communitylist.community }}
{%       endif %}
{%     endfor %}
{%   endif %}
!
{%   if helpers.exists('OPNsense.quagga.bgp.routemaps.routemap') %}
{%     for routemap in helpers.sortDictList(OPNsense.quagga.bgp.routemaps.routemap, 'name', 'id' ) %}
{%       if routemap.enabled == '1' %}
route-map {{ routemap.name }} {{ routemap.action }} {{ routemap.id }}
{%         if routemap.match|default("") != "" %}
{%           for aspath in routemap.match.split(",") %}
{%             set aspath_data = helpers.getUUID(aspath) %}
{%             if 'match' in routemap and routemap.match != '' %}
 match as-path {{ aspath_data.number }}
{%             endif %}
{%           endfor %}
{%         endif %}
{%         if routemap.set|default("") != '' %}
 set {{ routemap.set }}
{%         endif %}
{%         if routemap.match2|default("") != "" %}
{%           for prefixlist in routemap.match2.split(",") %}
{%             set prefixlist_data = helpers.getUUID(prefixlist) %}
{%             if 'match2' in routemap and routemap.match2 != '' and ':' in prefixlist_data.network %}
 match ipv6 address prefix-list {{ prefixlist_data.name }}
{%             else %}
 match ip address prefix-list {{ prefixlist_data.name }}
{%             endif %}
{%           endfor %}
{%         endif %}
{%         if routemap.match3|default("") != "" %}
{%           for communitylist in routemap.match3.split(",") %}
{%             set communitylist_data = helpers.getUUID(communitylist) %}
{%             if 'match3' in routemap and routemap.match3 != '' %}
 match community {{ communitylist_data.number }}
{%             endif %}
{%           endfor %}
{%         endif %}
{%         if routemap.set|default("") != '' and routemap.match2|default("") != '' %}
 set {{ routemap.set }}
{%         endif %}
{%       endif %}
{%     endfor %}
{%   endif %}
!
{% endif %}
!
{% if helpers.exists('OPNsense.quagga.bgpd.enabled') and OPNsense.quagga.general.enablesnmp == '1' %}
agentx
{% endif %}
!
line vty
!
{% endif %}
