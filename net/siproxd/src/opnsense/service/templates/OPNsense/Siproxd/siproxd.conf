{% if helpers.exists('OPNsense.siproxd.general.enabled') and OPNsense.siproxd.general.enabled == '1' %}
{% from 'OPNsense/Macros/interface.macro' import physical_interface %}

{% if helpers.exists('OPNsense.siproxd.general.if_inbound') and OPNsense.siproxd.general.if_inbound != '' %}
if_inbound  = {{ physical_interface('OPNsense.siproxd.general.if_inbound') }}
{% endif %}
{% if helpers.exists('OPNsense.siproxd.general.if_outbound') and OPNsense.siproxd.general.if_outbound != '' %}
if_outbound = {{ physical_interface('OPNsense.siproxd.general.if_outbound') }}
{% endif %}

{% if helpers.exists('OPNsense.siproxd.general.host_outbound') and OPNsense.siproxd.general.host_outbound != '' %}
host_outbound = {{ OPNsense.siproxd.general.host_outbound }}
{% endif %}

{% if helpers.exists('OPNsense.siproxd.general.hosts_allow_reg') and OPNsense.siproxd.general.hosts_allow_reg != '' %}
hosts_allow_reg = {{ OPNsense.siproxd.general.hosts_allow_reg }}
{% endif %}
{% if helpers.exists('OPNsense.siproxd.general.hosts_allow_sip') and OPNsense.siproxd.general.hosts_allow_sip != '' %}
hosts_allow_sip = {{ OPNsense.siproxd.general.hosts_allow_sip }}
{% endif %}
{% if helpers.exists('OPNsense.siproxd.general.hosts_deny_sip') and OPNsense.siproxd.general.hosts_deny_sip != '' %}
hosts_deny_sip = {{ OPNsense.siproxd.general.hosts_deny_sip }}
{% endif %}

#hosts_allow_reg = 192.168.1.8/24
#hosts_allow_sip = 123.45.0.0/16,123.46.0.0/16
#hosts_deny_sip  = 10.0.0.0/8,11.0.0.0/8

{% if helpers.exists('OPNsense.siproxd.general.sip_listen_port') and OPNsense.siproxd.general.sip_listen_port != '' %}
sip_listen_port = {{ OPNsense.siproxd.general.sip_listen_port }}
{% endif %}

daemonize = 1
silence_log = 3
registration_file = /var/lib/siproxd/siproxd_registrations
autosave_registrations = 300
pid_file = /var/run/siproxd/siproxd.pid
rtp_proxy_enable = 1

{% if helpers.exists('OPNsense.siproxd.general.rtp_port_low') and OPNsense.siproxd.general.rtp_port_low != '' %}
rtp_port_low  = {{ OPNsense.siproxd.general.rtp_port_low }}
{% endif %}
{% if helpers.exists('OPNsense.siproxd.general.rtp_port_high') and OPNsense.siproxd.general.rtp_port_high != '' %}
rtp_port_low  = {{ OPNsense.siproxd.general.rtp_port_high }}
{% endif %}
{% if helpers.exists('OPNsense.siproxd.general.rtp_timeout') and OPNsense.siproxd.general.rtp_timeout != '' %}
rtp_timeout = {{ OPNsense.siproxd.general.rtp_timeout }}
{% endif %}
{% if helpers.exists('OPNsense.siproxd.general.rtp_dscp') and OPNsense.siproxd.general.rtp_dscp != '' %}
rtp_dscp = {{ OPNsense.siproxd.general.rtp_dscp }}
{% endif %}
{% if helpers.exists('OPNsense.siproxd.general.sip_dscp') and OPNsense.siproxd.general.sip_dscp != '' %}
sip_dscp = {{ OPNsense.siproxd.general.sip_dscp }}
{% endif %}
{% if helpers.exists('OPNsense.siproxd.general.rtp_input_dejitter') and OPNsense.siproxd.general.rtp_input_dejitter != '' %}
rtp_input_dejitter  = {{ OPNsense.siproxd.general.rtp_input_dejitter }}
{% endif %}
{% if helpers.exists('OPNsense.siproxd.general.rtp_output_dejitter') and OPNsense.siproxd.general.rtp_output_dejitter != '' %}
rtp_output_dejitter = {{ OPNsense.siproxd.general.rtp_output_dejitter }}
{% endif %}
{% if helpers.exists('OPNsense.siproxd.general.tcp_timeout') and OPNsense.siproxd.general.tcp_timeout != '' %}
tcp_timeout = {{ OPNsense.siproxd.general.tcp_timeout }}
{% endif %}
{% if helpers.exists('OPNsense.siproxd.general.tcp_connect_timeout') and OPNsense.siproxd.general.tcp_connect_timeout != '' %}
tcp_connect_timeout = {{ OPNsense.siproxd.general.tcp_connect_timeout }}
{% endif %}
{% if helpers.exists('OPNsense.siproxd.general.tcp_keepalive') and OPNsense.siproxd.general.tcp_keepalive != '' %}
tcp_keepalive = {{ OPNsense.siproxd.general.tcp_keepalive }}
{% endif %}

debug_level =      0x00000000
debug_port = 0

{% if helpers.exists('OPNsense.siproxd.general.ua_string') and OPNsense.siproxd.general.ua_string != '' %}
ua_string = {{ OPNsense.siproxd.general.ua_string }}
{% endif %}

{% if helpers.exists('OPNsense.siproxd.general.use_rport') and OPNsense.siproxd.general.use_rport != '' %}
use_rport = {{ OPNsense.siproxd.general.use_rport }}
{% endif %}

{% if helpers.exists('OPNsense.siproxd.domain.domains.domain') %}
{%   for domain_list in helpers.toList('OPNsense.siproxd.domain.domains.domain') %}
{%     if domain_list.enabled == '1' %}
outbound_domain_name = {{ domain_list.name }}
outbound_domain_host = {{ domain_list.host }} 
outbound_domain_port = {{ domain_list.port }}
{%     endif %}
{%   endfor %}
{% endif %}

######################################################################
# Outbound proxy
#
# Siproxd itself can be told to send all traffic to another
# outbound proxy.
# You can use this feature to 'chain' multiple siproxd proxies
# if you have several masquerading firewalls to cross.
#
# outbound_proxy_host = my.outboundproxy.org
# outbound_proxy_port = 5060

######################################################################
# Outbound proxy (Provider specific)
#
# Outbound proxies can be specified on a per-domain base.
# This allows to use an outbound proxy needed for ProviderA
# and none (or another) for ProviderB.
#
#outbound_domain_name = freenet.de
#outbound_domain_host = proxy.for.domain.freende.de
#outbound_domain_port = 5060


######################################################################
# Loadable Plug-ins
#
# The plugins are loaded in the order they appear here. Also
# the processing order is given by the load order.
#
# plugin_dir: MUST be terminated with '/'
plugindir=/usr/local/lib/siproxd/
#
# List of plugins to load. MUST use the .la file extension!
#load_plugin=plugin_demo.la
#load_plugin=plugin_shortdial.la
load_plugin=plugin_logcall.la
#load_plugin=plugin_defaulttarget.la
#load_plugin=plugin_fix_bogus_via.la
#load_plugin=plugin_fix_DTAG.la
#load_plugin=plugin_stun.la
#load_plugin=plugin_prefix.la
#load_plugin=plugin_regex.la
#load_plugin=plugin_stripheader.la
#load_plugin=plugin_codecfilter.la
#load_plugin=plugin_siptrunk.la
#load_plugin=plugin_fix_fbox_anoncall.la




######################################################################
# Plugin_shortdial
#
# Quick Dial (Short Dial)
# ability to define quick dial numbers that can be accessed by
# dialing "*00" from a local phone. '00' corresponds to the entry number
# (pi_shortdial_entry) below. The '*' character can be chosen freely
# (pi_shortdial_akey).
# Note: If this module is enabled, there does NOT exist a way to dial
#       a "real" number like *01, siproxd will try to replace it by it's
#       quick dial entry.
#
# The first character is the "key", the following characters give
# the length of the number string. E.g. "*00" allows speed dials
# from *01 to *99. (the number "*100" will be passed through unprocessed)
plugin_shortdial_akey = *00
#
# *01 sipphone echo test
plugin_shortdial_entry = 17474743246
# *02 sipphone welcome message
plugin_shortdial_entry = 17474745000

######################################################################
# Plugin_defaulttarget
#
# Log redirects to syslog
plugin_defaulttarget_log = 1
# target must be a full SIP URI with the syntax
# sip:user@host[:port]
plugin_defaulttarget_target = sip:internal@dddd:port

######################################################################
# Plugin_fix_bogus_via
#
# Incoming (from public network) SIP messages are checked for broken
# SIP Via headers. If the IP address in the latest Via Header is
# part of the list below, it will be replaced by the IP where the
# SIP message has been received from.
plugin_fix_bogus_via_networks = 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16

######################################################################
# Plugin_fix_DTAG
#
# This plugin attempts to work-around some SIP issues with
# T-ONLINE SIP (as of 2015). T-Online.de sends broken Via headers in
# responses, causing the received SIP response to be discarded by
# any SIP client that properly checks the Via chain.
# DTAG_networks: Network where DTAG messages are received from.
plugin_fix_DTAG_networks = 217.0.23.100/32

######################################################################
# Plugin_stun
#
# Uses an external STUN server to determine the public IP
# address of siproxd. Useful for "in-front-of-NAT-router"
# scenarios.
plugin_stun_server = stun.stunprotocol.org
plugin_stun_port = 3478
# period in seconds to request IP info from STUN server
plugin_stun_period = 300

######################################################################
# Plugin_prefix
#
# unconditionally prefixes all outgoing calls with the
# "akey" prefix specified below.
plugin_prefix_akey = 0


plugin_stripheader_remove = Allow
plugin_stripheader_remove = User-Agent
plugin_stripheader_remove = Supported:100rel

plugin_codecfilter_blacklist = G722
plugin_codecfilter_blacklist = G726
plugin_codecfilter_blacklist = G729
plugin_codecfilter_blacklist = GSM

plugin_fix_fbox_anoncall_networks = 192.168.0.0/16,10.0.0.0/8,172.16.0.0/20


{% endif %}
