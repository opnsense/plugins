#!/usr/local/bin/ruby
=begin
Copyright (C) 2017 Fabian Franz
 *
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 *
1. Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 *
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
 *
THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE
=end


require 'json'
require 'optparse'

supported_formats = %w{json}
options = {format: 'json'}

OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} command"
  opts.on("-c", "--cache", "Dump cache") do |c|
    options[:dump_cache] = c
  end
  opts.on("-i", "--infra", "Dump infrastructure cache") do |c|
    options[:dump_infra] = c
  end
  opts.on("-f", "--format FORMAT") do |format|
    if supported_formats.include? format
      options[:format] = format
    else
      puts "the specified format is not valid"
      exit
    end
  end
  opts.on("-s", "--stats") do |stats|
    options[:stats] = stats
  end
  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end.parse!


def dump_cache
  raw = `unbound-control -c /var/unbound/remotecontrol.conf dump_cache`.split("\n")
  raw = raw.select {|x| (x.include? "IN") && (x[0] != ";") && !(x.start_with? "msg ") }
  raw.map do |line|
    host,ttl, type, rrtype, value = line.scan(/^(\S+)\s+(?:([\d]*)\s+)?(IN)\s+(\S+)\s+(.*)$/).first
    {host: host, ttl: ttl, type: type, rrtype: rrtype, value: value}
  end
end

def stats
  raw = `unbound-control -c /var/unbound/remotecontrol.conf stats`.split("\n")
  data = {}
  raw.each do |line|
    key,value = line.split("=")
    key_parts = key.split(".")
    if key_parts[0] == 'histogram'
      data['histogram'] = [] unless data['histogram']
      data['histogram'] << {from: key_parts[1..2].map(&:to_i), 
                            to: key_parts[4..5].map(&:to_i), 
                            value: value.to_i}
    else
      key = key_parts.pop
      origin = data
      key_parts.each do |kp|
        unless origin[kp]
          origin[kp] = {}
        end
        origin = origin[kp]
      end
      origin[key] = value.to_i
    end
  end
  data
end

def dump_infra
  raw = `unbound-control -c /var/unbound/remotecontrol.conf dump_infra`.split("\n")
  raw.map do |line|
    elements = line.split(/\s+/)
    data = {}
    data['ip'] = elements.shift
    data['host'] = elements.shift
    while elements.count > 2
      key = elements.shift
      if key == 'lame'
        data['lame'] = true
        next
      end
      tmp = elements.shift
      data[key] = tmp =~ /^\d+$/ ? tmp.to_i : tmp
    end
    data
  end
end

output = nil
if options[:dump_cache]
  output = dump_cache
end

if options[:dump_infra]
  output = dump_infra
end

if options[:stats]
  output = stats
end

puts case options[:format]
  when 'json'; then
    output.to_json
end
